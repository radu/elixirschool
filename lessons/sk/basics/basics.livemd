# Základy

## Príprava

### Inštalácia Elixiru

Návod na inštaláciu pre každý OS sú k dispozícii na Elixir-lang.org v sekcii [Installing Elixir](http://elixir-lang.org/install.html).

Po tom ako sa Elixir nainštaloval, môžeme jednoducho overiť verziu.

	$ elixir -v
	Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

	Elixir {{ site.elixir.version }}

### Interaktívny mód

Elixir obsahuje nástroj `iex`, interaktívny shell (príkazový riadok), ktorý dovoľuje skúšať a vyhodnocovať rôzne výrazy.

Začnime teda jeho spustením príkazom `iex`:

	Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

	Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
	iex>

## Základné dátové typy

### Celé čísla


```elixir
 255
```

Zabudovaná podpora pre binárne, oktalové (osmičkové) a hexadecimálne čisla:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### Desatinné čísla

V Elixire vyžadujú desatinné čísla aspoň jednu číslicu pred desatinnou bodkou, sú 64 bitové a podporujú zápis exponentu pomocou znaku `e`:


```elixir
 3.14
```

```elixir
 .14
```

```elixir
 1.0e-10
```


### Booleany

Elixir podporuje `true` a `false` ako boolean hodnoty; všetky hodnoty, okrem `false` a `nil` sú pravdivé (t.j. vyhodnotia sa ako `true`):


```elixir
 true
```

```elixir
 false
```

### Atómy

Atóm je konštanta, ktorej meno je zároveň jej hodnotou. Ak poznáte Ruby, tak atóm je ekvivalentom Symbolov:


```elixir
 :foo
```

```elixir
 :foo == :bar
```

Boolean hodnoty `true` a `false` sú zároveň atómami `:true` a `:false`.


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

Názvy modulov v Elixire sú tiež atómy. `MyApp.MyModule` je valídny atóm, dokonca aj keď taký modul ešte nebol deklarovaný.


```elixir
 is_atom(MyApp.MyModule)
```

Atómy sa tiež používajú na označenie modulov z knižníc Erlangu, vrátane vstavaných.


```elixir
 :crypto.strong_rand_bytes 3
```

### Reťazce

V Elixire sú reťazce enkódované v UTF-8 a ohraničené dvojitými úvodzovkami (double quotes):


```elixir
 "Hello"
```

```elixir
 "guľôčka"
```

Reťazce podporujú zalomenie riadkov a escapované sekvencie:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

Elixir tiež obsahuje zložitejšie dátové typy. O tých sa viac naučíme pri [kolekciách]() a [funkciách]().

## Základné operácie

### Aritmetika

Elixir podporuje základné operátory `+`, `-`, `*`, a `/` tak, ako by ste očakávali. Dôležitý detail: `/` vždy vráti desatinné číslo:


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

Ak potrebujete celočíselné delenie, alebo zvyšok po ňom (modulo), poskytuje na to Elixir tieto dve funkcie:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### Logické

Elixir poskytuje `||`, `&&`, a `!` ako logické operátory. Tie podporujú akékoľvek typy:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

Ďalšie tri logické operátory _vyžadujú_, aby prvým operandom bola hodnota typu Boolean (`true` alebo `false`):


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

### Porovnávanie

Elixir poskytuje všetky obvyklé porovnávacie operátory, na ktoré sme zvyknutí: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` a `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

Pre striktné porovnávanie celých a desatinných čísiel použite `===`:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

Dôležitou vlastnosťou Elixiru je, že umožňuje porovnať hodnoty akýchkoľvek dvoch typov, čo je obzvlášť užitočné pri zoraďovaní. Nie je nutné učiť sa spamäti poradie typov pri zoraďovaní, ale je dobré o ňom vedieť:


```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

Toto môže viesť k niektorým zaujímavým a valídnym porovnaniam, aké v iných jazykoch nenájdete:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### Interpolácia reťazcov

Ak ste niekedy používali Ruby, interpolácia reťazcov v Elixire vám nebude cudzia:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### Spájanie reťazcov

Spájanie reťazcov používa operátor `<>`:


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```
