# Interoperabilitas dengan Erlang

## Librari Standar

Librari standar Erlang yang luas itu dapat diakses dari code Elixir di dalam aplikasi kita.  Modul-modul Erlang direpresentasikan dengan atom huruf kecil seperti `:os` dan `:timer`.

Mari gunakan `:timer.tc` untuk mengukur waktu eksekusi dari sebuah fungsi yang ada:


```elixir
 Example.timed(fn (n) -> (n * n) * n end, [100])
```

Untuk daftar lengkap modul yang tersedia, lihat [Erlang Reference Manual](http://erlang.org/doc/apps/stdlib/).

## Paket Erlang

Dalam pelajaran sebelumnya kita membahas Mix dan menata dependensi kita.  Librari Erlang juga dengan cara yang sama.  Jika librari Erlang tersebut belum dimasukkan ke [Hex](https://hex.pm) anda bisa merujuk ke repositori git:


```elixir
def deps do
  [{:png, github: "yuce/png"}]
end
```

Sekarang kita bisa mengakses librari Erlang kita:


```elixir
png =
  :png.create(%{:size => {30, 30}, :mode => {:indexed, 8}, :file => file, :palette => palette})
```

## Perbedaan yang Nampak

Sekarang setelah kita tahu cara menggunakan Erlang kita harus membahas sebagian kejutan (gotcha) yang ada.

### Atom

Atom Erlang sangat mirip atom Elixir tanpa tanda titik dua (`:`).  Atom-atom Erlang direpresentasikan dengan string huruf kecil dan garis bawah:

Elixir:


```elixir
:example
```

Erlang:

```erlang
example.
```

### String

Dalam Elixir ketika kita berbicara tentang string yang kita maksud adalah binari yang dienkode dengan UTF-8.  Dalam Erlang, string tetap pakai kutip ganda tetapi merujuk ke char list:

Elixir:


```elixir
 is_list('Example')
```

```elixir
 is_list("Example")
```

```elixir
 is_binary("Example")
```

```elixir
 <<"Example">> === "Example"
```

Erlang:

```erlang
1> is_list('Example').
false
2> is_list("Example").
true
3> is_binary("Example").
false
4> is_binary(<<"Example">>).
true
```

Adalah penting dicatat bahwa banyak librari Erlang yang lawas mungkin tidak mendukung binary sehingga kita perlu mengkonversi string Elixir ke char list.  Untungnya hal ini mudah dikerjakan dengan fungsi `to_charlist/1`:


```elixir
 :string.words("Hello World")
```

```elixir
 "Hello World" |> to_charlist |> :string.words
```

### Variabel

Elixir:


```elixir
 x = 10
```

```elixir
 x1 = x + 10
```

Erlang:

```erlang
1> X = 10.
10

2> X1 = X + 1.
11
```

Selesai!  Menggunakan Erlang dari dalam aplikasi Elixir kita adalah mudah dan secara efektif melipatgandakan jumlah librari yang tersedia untuk kita.
