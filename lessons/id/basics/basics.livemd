# Dasar

## Setup

### Instalasi Elixir

Instruksi instalasi untuk masing-masing OS dapat dilihat di Elixir-lang.org bagian panduan [Installing Elixir](http://elixir-lang.org/install.html).

Setelah Elixir sudah di instal, anda dapat dengan mudah mengecek versi yang terinstal.

    % elixir -v
    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Elixir {{ site.elixir.version }}

### Moda Interaktif

Elixir dilengkapi dengan IEx, sebuah shell interaktif, yang memungkinkan kita mencoba perintah Elixir.

Untuk memulai, kita jalankan `iex`:

	Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

	Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
	iex>

Mari langsung saja kita coba dengan menulis beberapa sintaks sederhana:


```elixir
 2+3
```

```elixir
 2+3 == 5
```

```elixir
 String.length("The quick brown fox jumps over the lazy dog")
```

Jangan khawatir bila anda belum mengerti setiap sintaks ekspresi yang ada, tetapi kami berharap anda dapat ide-nya.

## Tipe dasar

### Integer


```elixir
 255
```

Dukungan terhadap bilangan biner, oktal, dan heksadesimal sudah tersedia secara default:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### Float

Dalam Elixir, bilangan tidak bulat (float) membutuhkan sebuah titik desimal setelah setidaknya satu digit; bilangan ini memiliki tingkat presisi 64 bit double precision dan mendukung `e` untuk bilangan eksponen:


```elixir
 3.14 
```

```elixir
 .14 
```

```elixir
 1.0e-10
```


### Boolean

Elixir mendukung `true` and `false` sebagai nilai boolean (logika); semua nilai dianggap sama dengan `true` kecuali `false` dan `nil`:


```elixir
 true
```

```elixir
 false
```

### Atom

Sebuah atom adalah sebuah konstanta dimana nilainya adalah namanya itu sendiri. Jika anda sudah familiar dengan Ruby, atom adalah sinonim dengan Symbol:


```elixir
 :foo
```

```elixir
 :foo == :bar
```

Nilai boolean `true` dan `false` masing-masing adalah juga atom `:true` dan `:false`.


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

Nama modul dalam Elixir adalah juga atom. `MyApp.MyModule` adalah atom yang sah, walaupun modul tersebut belum dideklarasikan.


```elixir
 is_atom(MyApp.MyModule)
```

Atom juga digunakan untuk mereferensi modul dari librari erlang, termasuk apa yang sudah ada.


```elixir
 :crypto.strong_rand_bytes 3
```

### String

String dalam Elixir adalah UTF-8 encoded dan dituliskan di antara petik ganda (double quotes):


```elixir
 "Hello"
```

```elixir
 "dziękuję"
```

String mendukung penggantian baris dan escape sequences:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

Elixir juga memasukkan banyak tipe-tipe data kompleks. Kita akan mempelajari lebih banyak lagi hal tersebut ketika kita belajar tentang [Koleksi](/id/lessons/basics/collections) dan [Fungsi](/id/lessons/basics/functions).

## Operasi Dasar

### Aritmetik

Elixir mendukung operator dasar `+`, `-`, `*`, dan `/` sebagaimana yang sudah dapat diduga. Penting diperhatikan bahwa `/` akan selalu menghasilkan bilangan float:


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

Jika anda membutuhkan pembagian bulat (integer) atau sisa pembagian, Elixir memiliki dua fungsi untuk itu:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### Boolean

Elixir menyediakan operator boolean `||`, `&&`, dan `!`. Operator-operator ini mendukung tipe apapun:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

Ada tiga operator tambahan yang argumen pertamanya _harus_ sebuah boolean (`true` dan `false`):


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

### Perbandingan

Elixir dilengkapi semua operator perbandingan (comparison) yang biasa kita pakai: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` dan `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

Untuk perbandingan yang ketat (strict) antara integer dan float gunakan operator `===`:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

Sebuah fitur penting dari Elixir adalah bahwa segala macam tipe dapat dibandingkan, ini berguna dalam pengurutan (sorting). Kita tidak perlu menghafalkan urutannya tapi penting untuk dipahami:


```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

Ini bisa menghasilkan perbandingan yang menarik, dan valid, yang mungkin tidak anda temukan di bahasa lain:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### Interpolasi String

Kalau anda sudah menggunakan Ruby, interpolasi string di Elixir akan tidak asing lagi:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### Perangkaian String

Perangkaian string menggunakan operator `<>` :


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```
