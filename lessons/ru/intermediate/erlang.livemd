# Взаимодействие с Erlang

## Стандартная библиотека

Обширная стандартная библиотека Erlang доступна для использования из любого Elixir кода в нашем приложении.
Модули Erlang представлены атомами в нижнем регистре, такими как `:os` и `:timer`.

Давайте воспользуемся `:timer.tc` для измерения времени выполнения функции:


```elixir
 Example.timed(fn (n) -> (n * n) * n end, [100])
```

Полный список доступных модулей есть в [Erlang Reference Manual](http://erlang.org/doc/apps/stdlib/).

## Пакеты Erlang

В предыдущем уроке мы рассмотрели Mix и управление зависимостями.
Подключение библиотек Erlang происходит так же.
В тех случаях, когда библиотеки нет на [Hex](https://hex.pm), можно подключить ее напрямую из Git-репозитория:


```elixir
def deps do
  [{:png, github: "yuce/png"}]
end
```

Теперь мы можем использовать эту библиотеку Erlang:


```elixir
png =
  :png.create(%{:size => {30, 30}, :mode => {:indexed, 8}, :file => file, :palette => palette})
```

## Заметные различия

Теперь, зная как использовать Erlang, рассмотрим нюансы этого взаимодействия.

### Атомы

Атомы в Erlang выглядят так же как и аналоги в Elixir, но без двоеточия (`:`).
Они содержат буквы в нижнем регистре и подчеркивания:

Elixir:


```elixir
:example
```

Erlang:

```erlang
example.
```

### Строки

Когда мы говорим о строках в Elixir, имеются ввиду бинарные объекты в UTF-8.
В Erlang строки точно так же используют двойные кавычки, но являются списком символов:

Elixir:


```elixir
 is_list('Example')
```

```elixir
 is_list("Example")
```

```elixir
 is_binary("Example")
```

```elixir
 <<"Example">> === "Example"
```

Erlang:

```erlang
1> is_list('Example').
false
2> is_list("Example").
true
3> is_binary("Example").
false
4> is_binary(<<"Example">>).
true
```

Многие старые библиотеки Erlang могут не поддерживать бинарные строки, потому нужно рассмотреть как превращать строки Elixir в строковые списки.
К счастью, это легко достигается функцией `to_charlist/1`:


```elixir
 :string.words("Hello World")
```

```elixir
 "Hello World" |> to_charlist() |> :string.words
```

### Переменные

В Erlang переменные начинаются с заглавной буквы, и повторная привязка не допускается.

Elixir:


```elixir
 x = 10
```

```elixir
 x = 20
```

```elixir
 x1 = x + 10
```

Erlang:

```erlang
1> X = 10.
10

2> X = 20.
** exception error: no match of right hand side value 20

3> X1 = X + 10.
20
```

Вот и всё! В наших приложениях Elixir можно с лёгкостью применять Erlang, что удваивает количество доступных для использования библиотек.
