# Списковые включения

## Основы

Часто списковые включения используются для краткой записи итераций по `Enum` и `Stream`.  Начнём с простого примера:


```elixir
 list = [1, 2, 3, 4, 5]
```

```elixir
 for x <- list, do: x*x
```

Первое, что бросается в глаза — использование `for` и генератора.  Что такое генератор?  Генераторы это выражения вида `x <- [1, 2, 3, 4]`, используемые в списковых включениях для генерации следующего значения.

К счастью, списковые включения не ограничены списками и могут работать с любым перечисляемым типом:


```elixir
 for {_key, val} <- [one: 1, two: 2, three: 3], do: val
```

```elixir
 for {k, v} <- %{"a" => "A", "b" => "B"}, do: {k, v}
```

```elixir
 for <<c <- "hello">>, do: <<c>>
```

Можно заметить, что работа генераторов основывается на сопоставлении с образцом — сравнении набора входных значений с переменной с левой стороны выражения.   Если совпадение не будет найдено, значение проигнорируется:


```elixir
 for {:ok, val} <- [ok: "Hello", error: "Unknown", ok: "World"], do: val
```

Можно использовать несколько генераторов как вложенные циклы:


```elixir
 list = [1, 2, 3, 4]
```

```elixir
 for n <- list, times <- 1..n do
```

Чтобы подробнее рассмотреть, что происходит в цикле, воспользуемся `IO.puts` для вывода пар генерируемых значений:


```elixir
 for n <- list, times <- 1..n, do: IO.puts "#{n} - #{times}"
```

Списковые включения — это синтаксический сахар, и их следует использовать только там, где это уместно.

## Фильтры

Фильтры можно рассматривать как ограничители списковых включений.  Если отфильтрованное значение возвращает `false` или `nil`, оно исключается из итогового списка.  Пройдёмся по диапазону и оставим только чётные числа:


```elixir
 for x <- 1..10, is_even(x), do: x
```

Также как и генераторы, можно использовать сразу несколько фильтров.  Для примера возьмём диапазон и исключим из него нечётные значения и числа, некратные трём:


```elixir
 for x <- 1..100,
```

## Использование :into

А что, если мы хотим получить что-то кроме списка?  Опция `:into` позволяет нам сделать это!  Как правило, `:into` принимает любую структуру, реализующую протокол `Collectable`.

Создадим ассоциативный массив из ключевого списка при помощи `:into`:


```elixir
 for {k, v} <- [one: 1, two: 2, three: 3], into: %{}, do: {k, v}
```

Строка — перечисляемый тип, поэтому мы можем использовать списковые включения и `:into` для создания строк:


```elixir
 for c <- [72, 101, 108, 108, 111], into: "", do: <<c>>
```

Вот и всё! Списковые включения — это лёгкий и краткий способ прохода по коллекциям.
