# IEx функции

## Введение

Когда вы начинаете писать код на Elixir, IEx - ваш лучший друг.
Это REPL и она имеет много дополнительных возможностей, которые сделают жизнь легче когда осваиваете новый код или по ходу работы.
В ней множество встроенных функций-помощников и мы пройдем их в этом уроке.

### Автодополнение

Когда идет работа в командной строке, вы часто можете использовать новый незнакомый модуль.
Чтобы понять что в нем доступно, функционал автодополнения вам в помощь.
Просто введите название модуля, затем `.` и нажмите `Tab`:


```elixir
 Map. # нажмите Tab
```

Теперь мы знаем какие функции там есть и их арность!

### .iex.exs

Каждый раз когда запускается IEx, система ищет файл конфигурации `.iex.exs`.
Если его нет в текущей директории, тогда идет поиск в домашней директории (`~/.iex.exs`) будет использован как резервный.

Опции конфигурации и код объявленный в этом файле будет доступен нам когда IEx запустится.
Например, если мы хотим добавить функцию-помощник в IEx, мы можем открыть `.iex.exs` и внести изменения.

Начнем с добавления модуля с несколькими такими помощниками:


```elixir
defmodule IExHelpers do
  def whats_this?(term) when is_nil(term), do: "Type: Nil"
  def whats_this?(term) when is_binary(term), do: "Type: Binary"
  def whats_this?(term) when is_boolean(term), do: "Type: Boolean"
  def whats_this?(term) when is_atom(term), do: "Type: Atom"
  def whats_this?(_term), do: "Type: Unknown"
end
```

Теперь когда мы запустим IEx, наш модуль IExHelpers будет доступен.
Откройте IEx и давайте повызываем новые функции:


```elixir
 IExHelpers.whats_this?("a string")
```

```elixir
 IExHelpers.whats_this?(%{})
```

```elixir
 IExHelpers.whats_this?(:test)
```

Как мы видим, нам не нужно делать что-то дополнительно чтобы импортировать наши помощники, IEx делает это за нас.

### h

`h` это один из часто используемых инструментов в командной строке Elixir.
Поскольку в языке есть поддержка документации первого класса, эта документация будет доступна для любого кода, к которому доберется эта функция-помощник.
В действии это просто:


```elixir
 h Enum
```

И теперь мы можем даже комбинировать это с автодополнением.
Представьте что мы видим впервые модуль Map:


```elixir
 h Map
```

```elixir
 Map.
```

```elixir
 h Map.merge/2
```

Как мы видим документация доступна не только для модулей, но и для отдельных функций, множество которых имеют примеры использования.

### i

Давайте применим новые знания о помощнике `h` чтобы узнать о функции-помощнике `i`:


```elixir
 h i
```

```elixir
 i Map
```

Теперь мы узнали о `Map` включая где находится исходный код и модули на которые `Map` ссылается.
Это довольно полезно при изучении пользовательских, чужих типов данных и новых функций.

Отдельные заголовки могут быть неочевидными, но с высокого уровня можно получить уместную информацию:

- Тип данных - атом
- Где находится исходный код
- Версия и опции при компиляции
- Общее описание
- Как получить документацию о модуле
- На какие другие модули ссылается

Это уже дает нам много для работы, лучше чем идти вслепую.

### r

Если мы хотим перекомпилировать определенный модуль, можем использовать функцию `r`.
Предположим, мы изменили код и ходим вызвать новую функцию, которую только что добавили.
Чтобы сделать это нужно сохранить изменения и перекомпилировать с `r`:


```elixir
 r MyProject
```

### t

Помощник `t` показывает о доступных типах модуля:


```elixir
 t Map
```

И мы знаем что `Map` определяет `key` и `value` типы в ее реализации.
Если проверим в исходном коде `Map`:


```elixir
defmodule Map do
# ...
  @type key :: any
  @type value :: any
# ...
```

Это простой пример показывает что `key` и `value` в зависимости от реализации могут быть `any` типа, полезно знать.
Используя все эти встроенные плюшки мы можем легко осваивать новый код и изучать как работают вещи.
IEx очень мощный и надежный инструмент который дает дополнительную силу разработчикам.
С этим набором инструментов, изучение и программирование может быть еще веселее!
