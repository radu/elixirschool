# Основы

## Настройка

### Установка Elixir

Инструкции по установке для всех ОС есть на [официальном сайте](http://elixir-lang.org/install.html).

После того, как Elixir установлен, вы с лёгкостью можете проверить, какая именно версия была установлена.

    % elixir -v
    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Elixir {{ site.elixir.version }}

### Интерактивный режим

Вместе с языком в комплекте идет приложение интерактивной командной строки IEx, которое позволяет выполнять выражения языка на лету.

Для того чтобы начать, запустите `iex`:

    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
    iex>

Примечание: В Windows PowerShell вам нужно написать `iex.bat`.

Попробуем написать несколько простых выражений:


```elixir
 2+3
```

```elixir
 2+3 == 5
```

```elixir
 String.length("The quick brown fox jumps over the lazy dog")
```

Не стоит волноваться, если пока вы поняли не все выражения.

## Базовые типы

### Целые числа


```elixir
 255
```

Поддерживаются также бинарные, восьмеричные и шестнадцатеричные числа:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### Числа с плавающей запятой

В Elixir числа с плавающей запятой требуют наличия хотя бы одной цифры перед точкой. Также они поддерживают `e` для описания экспонентной части:


```elixir
 3.14
```

```elixir
 .14
```

```elixir
 1.0e-10
```

### Логический тип

Elixir поддерживает два значения логического типа: `true` и `false`. Абсолютно все значения в языке считаются истинными кроме `false` и `nil`:


```elixir
 true
```

```elixir
 false
```

### Атомы

Атом — константа, название которой является и значением.
В других языках (например, в Ruby) они называются символами:


```elixir
 :foo
```

```elixir
 :foo == :bar
```

Стоит отметить, что булевы значения `true`, `false` являются атомами `:true` и `:false`.


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

Названия модулей в Elixir — тоже атомы. `MyApp.MyModule` — валидный атом, даже если такой модуль ещё не был объявлен.


```elixir
 is_atom(MyApp.MyModule)
```

Также атомы используются в качестве ссылок на модули из библиотек Erlang, в том числе и встроенные.


```elixir
 :crypto.strong_rand_bytes 3
```

### Строки

Строки в Elixir всегда представлены в кодировке UTF-8 и заключаются в двойные кавычки:


```elixir
 "Hello"
```

```elixir
 "dziękuję"
```

Строки могут включать разрывы и экранированные последовательности:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

В Elixir есть и более сложные типы данных.
Мы узнаем о них больше, когда познакомимся с [коллекциями](/ru/lessons/basics/collections) и [функциями](/ru/lessons/basics/functions).

## Базовые операторы

### Арифметика

В Elixir, ожидаемо, есть базовые операторы `+`, `-`, `*`, `/`.
Стоит отметить что результатом вызова `/` всегда будет число с плавающей запятой:


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

Если нужно целочисленное деление или получение остатка — в языке есть две удобные функции специально для этого:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### Логические операторы

Elixir предоставляет операторы `||`, `&&`, `!`, которые поддерживают работу с любыми типами:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

Также есть три дополнительных оператора, у которых первый аргумент _обязан_ быть логического типа (`true` или `false`):


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

Примечание: операторы `and` и `or` в Elixir на самом деле соответствуют `andalso` и `orelse` в Erlang.

### Сравнения

В Elixir поддерживаются все стандартные операторы сравнения: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<`, `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

Для строгого сравнения целых чисел и чисел с плавающей запятой используется `===`:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

Удобной возможностью языка является то, что любые типы сравнимы друг с другом. Это удобно при сортировках. Порядок не стоит запоминать, но о его существовании стоит знать:


```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

Это приводит к некоторым интересным правильным сравнениям, которых обычно нет в других языках программирования:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### Интерполяция строк

Если вы использовали язык Ruby, то интерполяция в Elixir покажется вам знакомой:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### Объединение строк

Для объединения двух строк используется оператор `<>`:


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```
