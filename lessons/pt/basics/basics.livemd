# Básico

## Primeiros Passos

### Instalando Elixir

As instruções para instalação em cada sistema operacional podem ser encontradas em [Elixir-lang.org](http://elixir-lang.org) na aba [Install](http://elixir-lang.org/install.html).

Após instalar o Elixir, você pode facilmente encontrar a versão instalada.

    % elixir -v
    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Elixir {{ site.elixir.version }}

### Modo Interativo

Elixir vem com IEx, um console interativo, que nos permite avaliar expressões em Elixir.

Para iniciar, executamos `iex`:

    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
    iex>

Nota: No Windows PowerShell, é necessário executar `iex.bat`.

Podemos testar e digitar algumas expressões simples:


```elixir
 2+3
```

```elixir
 2+3 == 5
```

```elixir
 String.length("The quick brown fox jumps over the lazy dog")
```

Não se preocupe se não entender cada expressão ainda, mas esperamos que você compreenda a ideia.

## Tipos Básicos

### Inteiros


```elixir
 255
```

O suporte para números binários, octais e hexadecimais também estão inclusos:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### Pontos Flutuantes

Em Elixir, os números de ponto flutuante requerem um decimal depois de pelo menos um dígito; estes possuem uma precisão de 64 bits e suportam `e` para números exponenciais:


```elixir
 3.14
```

```elixir
 .14
```

```elixir
 1.0e-10
```

### Booleanos

Elixir suporta `true` e `false` como booleanos; todo valor é verdadeiro com exceção de `false` e `nil`:


```elixir
 true
```

```elixir
 false
```

### Átomos

Um átomo é uma constante cujo o nome é seu valor.
Se está familiarizado com Ruby, estes são equivalentes aos símbolos:


```elixir
 :foo
```

```elixir
 :foo == :bar
```

Booleanos `true` e `false` também são os átomos `:true` e `:false`, respectivamente.


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

Nomes de módulos em Elixir também são átomos. `MyApp.MyModule` é um átomo válido, mesmo se tal módulo ainda não tenha sido declarado.


```elixir
 is_atom(MyApp.MyModule)
```

Átomos também são usados para referenciar módulos de bibliotecas Erlang, incluindo as bibliotecas integradas.


```elixir
 :crypto.strong_rand_bytes 3
```

### Strings

As strings em Elixir são codificadas em UTF-8 e são representadas com aspas duplas:


```elixir
 "Hello"
```

```elixir
 "dziękuję"
```

As strings suportam quebras de linha e caracteres de escape:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

Elixir também inclui tipos de dados mais complexos.
Nós vamos aprender mais sobre estes quando aprendermos sobre [coleções](/pt/lessons/basics/collections) e [funções](/pt/lessons/basics/functions).

## Operações Básicas

### Aritmética

Elixir suporta os operadores básicos `+`, `-`, `*`, e `/` como era de se esperar.
É importante ressaltar que `/` sempre retornará um número ponto flutuante:


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

Se você necessita de uma divisão inteira ou o resto da divisão, Elixir vem com duas funções úteis para isto:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### Booleanos

Elixir provê os operadores booleanos `||`, `&&`, e `!`.
Estes suportam qualquer tipo:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

Há três operadores adicionais cujo o primeiro argumento _tem_ que ser um booleano (`true` e `false`):


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

Nota: O `and` e `or` do Elixir são mapeados para `andalso` e `orelse` do Erlang.

### Comparação

Elixir vem com todos os operadores de comparação que estamos acostumados a usar: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` e `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

Para comparação de inteiros e pontos flutuantes usa-se `===`:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

Uma característica importante do Elixir é que qualquer tipo pode ser comparado; isto é particularmente útil em ordenação. Não precisamos memorizar a ordem de classificação, mas é importante estar ciente de que:


```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

Isso pode levar a algumas comparações interessantes e válidas, que você pode não encontrar em outras linguagens:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### Interpolação de Strings

Se você já usou Ruby, a interpolação de strings em Elixir parecerá muito familiar:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### Concatenação de Strings

A concatenação de strings usa o operador `<>`:


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```
