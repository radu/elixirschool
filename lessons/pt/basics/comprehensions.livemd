# Comprehensions

## Básico

Em alguns casos comprehensions podem ser usadas para produzir código mais conciso para fazer iterações com `Enum` e `Stream`. Vamos começar olhando para uma comprehension simples e então observar suas várias partes:


```elixir
 list = [1, 2, 3, 4, 5]
```

```elixir
 for x <- list, do: x*x
```

A primeira coisa que observamos é o uso de `for` e um generator (gerador). O que é um generator? Generators são as expressões `x <- [1, 2, 3, 4]` encontradas em comprehensions. Eles são responsáveis por gerar o próximo valor.

Para nossa sorte, comprehensions não são limitadas a listas; na verdade elas funcionam com qualquer enumerable:


```elixir
 for {_key, val} <- [one: 1, two: 2, three: 3], do: val
```

```elixir
 for {k, v} <- %{"a" => "A", "b" => "B"}, do: {k, v}
```

```elixir
 for <<c <- "hello">>, do: <<c>>
```

Como muitas outras coisas em Elixir, generators se apoiam no pattern matching para comparar a entrada definida na variável à esquerda. Caso um match não seja encontrado, o valor é ignorado.


```elixir
 for {:ok, val} <- [ok: "Hello", error: "Unknown", ok: "World"], do: val
```

É possível utilizar múltiplos generators, bem como loops aninhados:


```elixir
 list = [1, 2, 3, 4]
```

```elixir
 for n <- list, times <- 1..n do
```

Para ilustrar melhor cada iteração do loop, vamos usar `IO.puts` para mostrar os dois valores gerados:


```elixir
 for n <- list, times <- 1..n, do: IO.puts "#{n} - #{times}"
```

Comprehensions são _syntactic sugar_ e devem ser utilizadas apenas quando for apropriado.

## Filtros

Você pode pensar em filtros como um tipo de _guard_ para comprehensions. Quando um valor filtrado retorna `false` ou `nil` ele é excluído da lista final. Vamos iterar por um intervalo e olhar apenas os números pares. Nós vamos usar a função `is_even/1` do módulo Integer para checar se um valor é par ou não.


```elixir
 for x <- 1..10, is_even(x), do: x
```

Assim como os generators, nós podemos usar múltiplos filtros. Vamos expandir nosso intervalo e então filtrar apenas para valores que sejam pares e também divisíveis por 3.


```elixir
 for x <- 1..100,
```

## Usando :into

E se nós quisermos produzir algo que não seja uma lista? Passando a opção `:into` nós podemos fazer exatamente isso! Como uma regra geral, `:into` aceita qualquer estrutura que implemente o protocolo `Collectable`.

Usando `:into`, vamos criar um mapa de uma lista de palavras-chave.


```elixir
 for {k, v} <- [one: 1, two: 2, three: 3], into: %{}, do: {k, v}
```

Como bitstrings implementam collectables nós podemos usar comprehensions e `:into` para criar strings:


```elixir
 for c <- [72, 101, 108, 108, 111], into: "", do: <<c>>
```

É isso! Comprehensions são um modo fácil de iterar por coleções de maneira concisa.
