# Основи

## Настройване

### Инсталация на Elixir

Инструкции за инсталиране за всяка операционна система могат да бъдат намерени на Elixir-lang.org в раздел [Installing Elixir](http://elixir-lang.org/install.html).

След като Elixir е записан, може лесно да се потвърди инсталираната версия:

    % elixir -v
    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Elixir {{ site.elixir.version }}

### Интерактивен Режим

Elixir инсталира и `iex`, интерактивен команден ред, който ни позволява да изпълняваме код на Elixir в реално време.

За да започнем, нека изпълним `iex`:

    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
    iex>

Нека го изпробваме, с няколко прости израза:


```elixir

```

```elixir
 2+3 == 5
```

```elixir
 String.length("The quick brown fox jumps over the lazy dog")
```

Не се притеснявайте, ако не разбирате всичко, надяваме се просто да схванете идеята.

## Основни Типове

### Прости Числа


```elixir
 255
```

Поддръжката на числа в бинарен, осмичен и шестнайсетичен вид са вградени:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### Реални Числа

При Elixir, реалните числа изискват десетична точка след поне една цифра; имат 64 битова прецизност и поддържат `e` за номера като експонента:


```elixir
 3.14
```

```elixir
 .14
```

```elixir
 1.0e-10
```


### Булеви стойности

Elixir поддържа `true` и `false` като булеви стойности; всичко е истинно с изключение на `false` и `nil`:


```elixir
 true
```

```elixir
 false
```

### Атоми

Атом е константа, чието име е стойност. Ако сте запознати с езика за програмиране Ruby, те са синонимни със символи (Symbols):


```elixir
 :foo
```

```elixir
 :foo == :bar
```

Булевите `true` и `false` са също така атомите `:true` и  респективно `:false`.


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

Имената на модулите в Elixir са също атоми. `MyApp.MyModule` е валиден атом, въпреки, че такъв модул още не е деклариран.


```elixir
 is_atom(MyApp.MyModule)
```

Атомите се използват също за рефериране към модули от Erlang библиотеки, включително вградените.


```elixir
 :crypto.strong_rand_bytes 3
```
### Символни низове

Символните низове в Elixir са кодирани в UTF-8 и са поставени между двойни кавички:


```elixir
 "Hello"
```

```elixir
 "dziękuję"
```

Символните низове поддържат нов ред и специални поредици:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

Elixir също има по-сложни типове данни. За тях, ще научим повече, когато разглеждаме Колекции и Функции.

## Основни Операции

### Аритметични

Elixir поддържа основните оператори `+`, `-`, `*`, и `/` както се очаква.  Важно е да се отбележи, че `/` винаги връща реално число:


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

Ако имате нужда от деление на прости числа или от остатъка при деление, Elixir разполага с две полезни функции да постигнете това:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### Булеви

Elixir предлага булевите оператори  `||`, `&&`, и `!`. Те поддържат всякакви типове:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

Има три допълнителни оператора, чиито първи аргумент _трябва_ да е булев (`true` и `false`):


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

### Сравнения

Elixir идва с всички оператори за сравнение, с които сме свикнали: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` и `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

За стриктни сравнения на прости числа и реални използвайте  `===`:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

Важно свойство на Elixir е че всеки два типа могат да бъдат сравнени, което е изключително полезно при сортиране. Не е нужно да запаметяваме реда на сортиране, но е важно да го имаме предвид:


```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

Това може да доведе до някои интересни, но валидни сравнения, които може и да не намерите в други езици:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### Интерполация на символни низове

Ако сте ползвали Ruby, интерполацията на симвлни низове в Elixir ще ви изглежда позната:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### Конкатенация на символни низове

Конкатенацията на символни низове използва оператора `<>`:


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```
