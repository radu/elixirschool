# パターンマッチング

## マッチ演算子

変化球への準備はいいですか？Elixirでは、 `=` 演算子は実際には代数学での等号に値するマッチ演算子です。このマッチ演算子を通して値を代入し、その後マッチさせることができます。マッチングに成功すると方程式の結果を返します。失敗する場合はエラーを投げます。見てみましょう:


```elixir
 x = 1
```

では、いくつか単純なマッチングを試してみましょう:


```elixir
 1 = x
```

```elixir
 2 = x
```

知っているコレクションで、いくつか試してみましょう:


```elixir
 list = [1, 2, 3]
```

```elixir
 [1, 2, 3] = list
```

```elixir
 [] = list
```

```elixir
 [1 | tail] = list
```

```elixir
 tail
```

```elixir
 [2|_] = list
```

```elixir
 {:ok, value} = {:ok, "Successful!"}
```

```elixir
 value
```

```elixir
 {:ok, value} = {:error}
```

## ピン演算子

マッチ演算子は左辺に変数が含まれている時に代入操作を行います。
この変数を再び束縛するという挙動は望ましくない場合があります。
そうした状況のために、ピン演算子(`^`)があります。

ピン演算子で変数を固定すると、新しく再束縛するのではなく既存の値とマッチします。
これがどのような働きをするのか見てみましょう:


```elixir
 x = 1
```

```elixir
 ^x = 2
```

```elixir
 {x, ^x} = {2, 1}
```

```elixir
 x
```

Elixir 1.2ではマップのキーや関数の節でのピン演算子がサポートされました。


```elixir
 key = "hello"
```

```elixir
 %{^key => value} = %{"hello" => "world"}
```

```elixir
 value
```

```elixir
 %{^key => value} = %{:hello => "world"}
```

関数の節でのピン演算子の例:


```elixir
 greeting = "Hello"
```

```elixir
 greet = fn
```

```elixir
 greet.("Hello", "Sean")
```

```elixir
 greet.("Mornin'", "Sean")
```

```elixir
 greeting
```

`"Mornin'"` の例では、 `greeting` から `"Mornin'"` への再代入が発生するのは関数の中だけという点に注意しましょう。 `greeting` の外側では `"Hello"` のままとなっています。
