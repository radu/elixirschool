# IEx Helpers

## 概要

Elixirを始めるとき、IExはあなたの開発の強力な手助けになるでしょう。
IExはREPLでありながら、コードの探索やあなたのコードの開発をよりかんたんにするための多くの機能を備えています。

IExにはたくさんの内蔵のヘルパーがあります。このレッスンでそれぞれ説明していきます。

### オートコンプリート

シェルで作業をしていると、あなたは自力でよく知らない、新しいモジュールを発見できるでしょう。
利用できる機能の中でもオートコンプリート機能は素晴らしい機能です。
モジュール名の後に `.` を入力し、続いて `Tab` を押してみてください。


```elixir
 Map. # press Tab
```

これで、モジュールが持つ関数及びその引数を知ることができます。

### .iex.exs

IExを起動するとき、毎回 `.iex.exs` という設定ファイルを参照しています。もしそのファイルがカレントディレクトリに存在しない場合はユーザーのホームディレクトリの(`~/.iex.exs`)がフォールバック先として参照されます。

オプションやコードをこのファイルに設定するとIEx上で利用可能になります。たとえば、新しくIEx上で利用したいヘルパー関数がある場合は `.iex.exs` を変更します。

幾つかヘルパー関数を用意してみましょう


```elixir
defmodule IExHelpers do
  def whats_this?(term) when is_nil(term), do: "Type: Nil"
  def whats_this?(term) when is_binary(term), do: "Type: Binary"
  def whats_this?(term) when is_boolean(term), do: "Type: Boolean"
  def whats_this?(term) when is_atom(term), do: "Type: Atom"
  def whats_this?(_term), do: "Type: Unknown"
end
```

IExを起動すると、 `IExHelpers` モジュールが利用可能になっています。実際に試してみましょう。


```elixir
 IExHelpers.whats_this?("a string")
```

```elixir
 IExHelpers.whats_this?(%{})
```

```elixir
 IExHelpers.whats_this?(:test)
```

このようにヘルパーを利用するためになにか特別な処理を記述する必要が無いことがわかります。

### h

`h` はもっとも便利なツールの一つです。
このヘルパーを使って、言語機能によって提供された素晴らしいドキュメンテーションに到達することができます。

次のようにシンプルに利用できます


```elixir
 h Enum
```

さらに、オートコンプリート機能と組み合わせて利用することもできます。
最初にMapを探索してみます。


```elixir
 h Map
```

```elixir
 Map.
```

```elixir
 h Map.merge/2
```

このようにモジュールのどの関数が利用可能かということだけでなく、それぞれの関数のドキュメンテーションやたくさんの利用例を見ることができます。

### i

さて、前の項で学んだ `h` ヘルパーを利用して、 `i` というヘルパーについて学んでいきましょう。


```elixir
 h i
```

```elixir
 i Map
```

こうして `Map` に関するソースコードの所在や関連するモジュールなどの情報を見ることができます。この機能によって簡単に慣習や外部データ型や新しい関数について調べる事ができます。

それぞれの見出しは密である可能性がありますが、高い水準で関連する情報を集めています。

- MapはAtom型である
- ソースコードがどこにあるか
- そのバージョンとコンパイルオプション
- 一般的な説明分
- Mapにアクセスする方法
- 他にどのモジュールを参照しているか

この機能は私たちにより多く働きかけ、有意義にできます。

### r

モジュール単位など、部分的に再コンパイルをしたいときは `r` ヘルパーを使います。コードを変更し変更したときや新しい関数を再コンパイルしたいときに使ってみましょう。今回は変更を加えたコードを `r` ヘルパーによってを再コンパイルしてみます。


```elixir
 r MyProject
```

### t

`t` ヘルパーは引数に渡したモジュールの利用可能な型を見ることができます。


```elixir
 t Map
```

このように `Map` モジュールがkeyとvalueに定義している型が分かります。
`Map` のソースを読んで確認してみます。


```elixir
defmodule Map do
# ...
  @type key :: any
  @type value :: any
# ...
```

これは簡単な例であり、keyやvalueの値はどのような型でも構いませんが知っておくと便利です。

これらすべての内蔵機能を活用することで、簡単にコードを探索したりどのように実行されるか学ぶことができます。IExは開発者にとって協力なツールです。このようなツール郡を使いこなすことでより開発を楽しめるようになるでしょう！
