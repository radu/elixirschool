# Ayudantes de IEx

## Visión general

Cuando empiezas a trabajar en Elixir, IEx es tu mejor amigo.
Es un REPL (Read-Eval-Print-Loop), pero tiene muchas características avanzadas que pueden hacer la vida más fácil cuando se explora un nuevo código o se desarrolla un trabajo propio a medida que se avanza.
Hay un montón de ayudantes incorporados que repasaremos en esta lección.

### Autocompletar

Cuando trabaje en el _shell_, a menudo podría encontrarse usando un nuevo módulo con el que no está familiarizado.
Para entender algo de lo que está disponible para usted, la funcionalidad de autocompletar es maravillosa.
Simplemente escriba el nombre del módulo seguido de **.** y luego pulse la tecla <kbd>Tab</kbd>:


```elixir
 Map. # pulsa Tab
```

¡Y ahora sabemos las funciones que tenemos y su número de argumentos que acepta una funcion en específico!

### .iex.exs

Cada vez que IEx se inicia buscará un archivo de configuración `.iex.exs`. Si no está presente en el directorio actual, entonces el directorio raíz del usuario (`~/.iex.exs`) será usado como respaldo.

Las opciones de configuración y el código definido en este archivo estarán disponibles cuando se inicie el
de IEx. Por ejemplo, si queremos algunas funciones de ayuda disponibles en IEx, podemos abrir `.iex.exs` y hacer algunos cambios.

Empecemos por añadir un módulo con algunas funciones de ayuda:


```elixir
defmodule IExHelpers do
  def whats_this?(term) when is_nil(term), do: "Type: Nil"
  def whats_this?(term) when is_binary(term), do: "Type: Binary"
  def whats_this?(term) when is_boolean(term), do: "Type: Boolean"
  def whats_this?(term) when is_atom(term), do: "Type: Atom"
  def whats_this?(_term), do: "Type: Unknown"
end
```

Ahora cuando ejecutemos IEx tendremos el módulo IExHelpers disponible desde el principio. Abre IEx y probemos nuestros nuevos ayudantes:


```elixir
 IExHelpers.whats_this?("a string")
```

```elixir
 IExHelpers.whats_this?(%{})
```

```elixir
 IExHelpers.whats_this?(:test)
```

Como podemos ver no necesitamos hacer nada especial para requerir o importar nuestros ayudantes, IEx se encarga de eso por nosotros.

### h

El `h` es una de las herramientas más útiles que nos da nuestra cáscara de elixir.
Gracias al fantástico soporte de documentación de primera clase que ofrece Elixir, se puede acceder a los documentos de cualquier código mediante este asistente.
Verlo en acción es simple:


```elixir
 h Enum
```

Y ahora podemos incluso combinar esto con las características de autocompletar de nuestro _shell_.
Imagínate que estábamos explorando Map por primera vez:


```elixir
 h Map
```

```elixir
 Map.
```

```elixir
 h Map.merge/2
```

Como podemos ver, no sólo pudimos encontrar cuales funciones estaban disponibles como parte del módulo, sino que también pudimos acceder a documentos de funciones individuales, muchos de los cuales incluyen ejemplos de uso.

### i

Pongamos en práctica algunos de nuestros nuevos conocimientos mediante el empleo de `h` para aprender un poco más sobre el `i` helper:


```elixir
 h i
```

```elixir
 i Map
```

Ahora tenemos un montón de información sobre `Map` incluyendo dónde está almacenado su código fuente y los módulos a los que hace referencia. Esto es muy útil cuando se exploran datos personalizados, tipos de datos externos y nuevas funciones.

Los títulos individuales pueden ser densos, pero a un alto nivel podemos recopilar información relevante:

- Es un tipo de datos atómicos
- Donde el código fuente se encuentra
- La versión y las opciones de compilación
- Una descripción general
- Cómo acceder a ella
- A qué otros módulos hace referencia

Esto nos da mucho con que trabajar y es mejor que ir a ciegas.

### r

Si queremos recompilar un módulo en particular podemos usar el ayudante `r`. Digamos que hemos cambiado algún código y queremos ejecutar una nueva función que hemos añadido. Para ello necesitamos guardar nuestros cambios y recompilar con r:


```elixir
 r MyProject
```

### t

El `t` helper nos habla de los Tipos disponibles en un módulo dado:


```elixir
 t Map
```

Y ahora sabemos que `Map` define los tipos de claves y valores en su implementación.
Si vamos y miramos la fuente de `Map`:


```elixir
defmodule Map do
# ...
  @type key :: any
  @type value :: any
# ...
```

Este es un ejemplo simple, indicando que las claves y valores por implementación pueden ser de cualquier tipo, pero es útil saberlo.

Aprovechando todas estas sutilezas incorporadas podemos explorar fácilmente el código y aprender más sobre cómo funcionan las cosas. IEx es una herramienta muy poderosa y robusta que da poder a los desarrolladores. ¡Con estas herramientas en nuestra caja de herramientas, explorar y construir puede ser aún más divertido!
