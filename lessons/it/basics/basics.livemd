# Base

## Configurazione

### Installare Elixir

Le istruzioni per l'installazione per ciascun sistema operativo sono disponibili su Elixir-lang.org nella guida [Installing Elixir](http://elixir-lang.org/install.html).

Dopo aver installato Elixir, possiamo facilmente controllare la versione installata.

    % elixir -v
    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Elixir {{ site.elixir.version }}

### Modalità Interattiva

Elixir viene fornito con IEx, una shell interattiva che permette di eseguire istruzioni di Elixir in tempo reale.

Per cominciare, lanciamo il comando `iex`:

	Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

	Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
	iex>

Ora proviamola con alcuni semplici comandi:


```elixir
 2+3
```

```elixir
 2+3 == 5
```

```elixir
 String.length("The quick brown fox jumps over the lazy dog")
```

Non preoccuparti se non capisci ogni singola espressione, ma speriamo che tu abbia un'idea generale.

## Tipi di Base

### Interi


```elixir
 255
```

Il supporto per numeri in notazione binaria, ottale ed esadecimale è già incluso:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### Numeri in Virgola Mobile (Float)

In Elixir, i numeri in virgola mobile richiedono un decimale dopo almeno una cifra; hanno una doppia precisione a 64 bit e supportano la `e` per i numeri con notazione esponenziale:


```elixir
 3.14 
```

```elixir
 .14 
```

```elixir
 1.0e-10
```


### Booleani

Elixir supporta `true` e `false` come booleani; ogni valore è considerato vero ad eccezione di `false` e `nil`:


```elixir
 true
```

```elixir
 false
```

### Atoms

Un atom è una costante la quale nome è anche il suo valore. Se hai familiarità con Ruby, puoi considerare gli atoms come i Symbols:


```elixir
 :foo
```

```elixir
 :foo == :bar
```

NOTA: I booleani `true` e `false` sono, rispettivamente, anche `:true` e `:false`.


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

I Nomi dei moduli in Elixir sono anch'essi atomi. `MyApp.MyModule` è un atom valido, anche se nessun modulo con questo nome è stato dichiarato.


```elixir
 is_atom(MyApp.MyModule)
```

Inoltre, gli Atomi sono usati per fare riferimento ai moduli delle librerie Erlang, incluse quelle già integrate.


```elixir
 :crypto.strong_rand_bytes 3
```

### Stringhe

Le stringhe in Elixir sono codificate in UTF-8 e vengono racchiuse tra apici doppi:


```elixir
 "Hello"
```

```elixir
 "dziękuję"
```

Le stringhe supportano le interruzioni di linea e le sequenze di escape:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

Oltre a questi tipi di base, Elixir supporta tipi di dati piú compliessi.
Impareremo di piú su questi durante le lezioni sulle [collezioni](/it/lessons/basics/collections) e [funzioni](/it/lessons/basics/functions).

## Operazioni di Base

### Aritmetica

Elixir supporta gli operatori di base `+`, `-`, `*`, e `/` esattamente come ti aspetteresti. È importante notare che l'operatore `/` restituirà sempre un numero in virgola mobile:


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

Se hai bisogno di fare una divisione tra interi o ottenere il resto di una divisione, Elixir offre due funzioni utili per questo scopo:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### Logica Booleana

Elixir mette a disposizione gli operatori booleani `||`, `&&`, e `!`. Questi supportano qualsiasi tipo di dato:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

Esistono altri tre operatori che _devono_ ricevere un booleano (`true` e `false`) come primo argomento:


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

Nota: Le operazioni booleane `and` e `or` in Elixir derivano a `andalso` e `orelse` in Erlang.

### Confronto

Elixir è provvisto di tutti gli operatori di comparazione ai quali siamo abituati: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` e `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

Per una comparazione rigorosa (_strict_) tra interi e numeri in virgola mobile, usa `===`:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

Una funzionalità importante di Elixir è che due valori di qualsiasi tipo possono essere confrontati, questo è particolarmente utile per l'ordinamento. Non abbiamo bisogno di memorizzare la sequenza di ordinamento, ma è importante esserne al corrente:


```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

Questo può portare ad alcuni interessanti, e validi, confronti che potresti non trovare in altri linguaggi:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### Interpolazione in una Stringa

Se hai usato Ruby, l'interpolazione di una stringa in Elixir ti sembrerà familiare:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### Concatenazione di Stringhe

Per concatenare le stringhe si usa l'operatore `<>`:


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```
