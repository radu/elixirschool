# Erlang'ın Çalışabilirliği

## Standart Kütüphaneler

Erlang'ın kapsamlı standart kütüphanelerine, uygulamamızdaki herhangi bir Elixir kodundan erişilebilir. Erlang modülleri, `:os` ve `:timer` gibi küçük atomlarla temsil edilir.

Belirli bir fonksiyonun çalışmasını zamanlamak için `: timer.tc` kullanalım:


```elixir
 Example.timed(fn (n) -> (n * n) * n end, [100])
```

Mevcut modüllerin tam listesi için, [Erlang Referans Kılavuzu](http://erlang.org/doc/apps/stdlib/) 'na bakmanız sizin için daha iyi olacaktır.

## Erlang Paketleri

Önceki birkaç dersimizde Mix'i ve bağımlılarımızı yönetmeyi gördük. Erlang'da bulunan kütüphanelerde de aynı şekilde çalışır. Erlang kütüphanesi [Hex](https://hex.pm) 'e aktarılmamışsa, git depolarını kullanabilirsiniz:


```elixir
def deps do
  [{:png, github: "yuce/png"}]
end
```

Şimdi Erlang kütüphanemize erişebiliriz:


```elixir
png =
  :png.create(%{:size => {30, 30}, :mode => {:indexed, 8}, :file => file, :palette => palette})
```

## Önemli Farklar

Şimdi Erlang'ı nasıl kullanacağımızı biliyoruz, Erlang çalışabilirliğiyle gelen bazı tuhaflıklara da bakmamız gerekiyor. Bir takım değişiklikler olduğunu görebilirsiniz.

### Atomlar

Erlang atomları, Kolonsuz (`:`) Elixir muadillerine oldukça fazla benziyorlar. Bunlar küçük dizeleri ve alt çizgi ile temsil edilmektedir:

Elixir:


```elixir
:example
```

Erlang:

```erlang
example.
```

### Dizeler(Strings)

Elixir'de dizeler hakkında konuştuğumuzda UTF-8 kodlu ikili dosyalardan bahsediyorduk. Erlang'da, dizeler hala çift tırnak ile kullanır ancak Char listelerine başvurur:

Elixir:


```elixir
 is_list('Example')
```

```elixir
 is_list("Example")
```

```elixir
 is_binary("Example")
```

```elixir
 <<"Example">> === "Example"
```

Erlang:

```erlang
1> is_list('Example').
false
2> is_list("Example").
true
3> is_binary("Example").
false
4> is_binary(<<"Example">>).
true
```

Birçok eski Erlang kütüphanesinin ikili dosyaları desteklemeyebileceğini, dolayısıyla Elixir dizelerini direk olarak Char listelerine dönüştürmenüz gerektiğini sakın ha unutmayın. Neyse ki dönüştürme işlemlerini `to_charlist/1` fonksiyonu ile gerçekleştirmek oldukça kolay:


```elixir
 :string.words("Hello World")
```

```elixir
 "Hello World" |> to_charlist |> :string.words
```

### Değişkenler

Elixir:


```elixir
 x = 10
```

```elixir
 x1 = x + 10
```

Erlang:

```erlang
1> X = 10.
10

2> X1 = X + 1.
11
```

Bu kadar! Erlang'dan yararlanarak Elixir uygulamalarımıza eklemeler yaptık , bizim için mevcut olan kütüphanelerin sayısını kolay ve etkili bir şekilde iki katına çıkartmış oldu.
