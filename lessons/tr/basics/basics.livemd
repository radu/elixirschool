# Temeller

## Başlarken

### Elixir Kurulumu

Her işletim sistemi için uygun kurulum talimatlarını elixir-lang.org sitesinde [Elixir Kurulumu](http://elixir-lang.org/install.html) bulabilirsiniz.

Elixir yüklendikten sonra aşağıdaki komut ile kolayca kurulu sürümü doğrulayabilirsiniz.

    % elixir -v
    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Elixir {{ site.elixir.version }}

### Etkileşimli (İnteraktif) Modu Deneyelim

Elixir `iex` isimli, Elixir ifadelerini kolayca çalıştırmanız için etkileşimli (interaktif) bir kabuk ile birlikte gelir.

`iex` komutunu çalıştıralım:

    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
    iex>

Birkaç basit ifade yazmayı deneyelim:


```elixir
 2+3
```

```elixir
 2+3 == 5
```

```elixir
 String.length("The quick brown fox jumps over the lazy dog")
```

Henüz birşey anlamadıysanız endişe etmeyin, ama umarım bir fikir edinmişsinizdir.

## Temel Veri Tipleri

### Tam Sayılar (Integers)


```elixir
 255
```

Binary, octal, and hexadecimal sayı desteği dahili olarak gelmektedir:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### Ondalıklı Sayılar (Floats)

Elixir de ondaklı sayılarda en az bir rakamdan sonra ondalıklı sayı gelmelidir. Toplamda 64 bit tutulan çifte duyarlı (double precision) sayılarını destekler:


```elixir
 3.14
```

```elixir
 .14
```

```elixir
 1.0e-10
```


### Mantıksal Tipler (Booleans)

Elixir de mantıksal `true` ve `false` değerleri bulunur; `false` ve `nil` dışında herşey true olarak kabul edilir:


```elixir
 true
```

```elixir
 false
```

### Atomlar

Bir atom, değeri adı olan bir sabittir. Eğer Ruby'e aşina iseniz sembollere benzer:


```elixir
 :foo
```

```elixir
 :foo == :bar
```

Mantıksal `true` ve `false` değerleri aynı zamanda atom olarak sırasıyla `:true` ve `:false` olarak ifade edilir.


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

Modül isimleri aynı zamanda Elixir içerisinde birer atomdur. `MyApp.MyModule` geçerli bir atomdur. Hatta böyle bir modül henüz beyan edilmemişse bile.


```elixir
 is_atom(MyApp.MyModule)
```

Atomlar aynı zamanda Erlang kütüphanelerine erişmek için de kullanılır.

```elixir
 :crypto.strong_rand_bytes 3
```

### Stringler

Elixir içinde stringler UTF-8 olarak kodlanmış ve çift tırnak ile çevrelenmiştir:


```elixir
 "Hello"
```

```elixir
 "dziękuję"
```

Stringler line-break ve escape karakteri destekler:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

Elixir aynı zamanda karmaşık veri tipleri içerir. Koleksiyonlar ve Fonksiyonları öğrendiğimiz zaman bu konuda daha çok şey öğreneceğiz:

## Temel Operasyonlar

### Aritmatik

Elixir `+` `-`,`*` ve `/` olarak beklediğimiz temel operatörleri destekler. Önemli bir not, `/` operatörü her zaman ondalıklı tipinde döner:


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

Eğer tamsayılarda bölme veya kalan bulma işlemleri yapmak gerekiyorsa, Elixir bunun için iki yardımcı fonksiyon ile birlikte gelmektedir:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### Mantıksal Operatörler (Boolean)

Elixir `||`, `&&`, ve `!` mantıksal operatörleri sağlar. Bunlar her tipi destekler:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

İlk argümanı mutlaka mantıksal değer (`true` yada `false`) olması gereken 3 ek operatör bulunmaktadır:


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

### Karşılaştırmalar

Elixir birçok karşılaştırma operatörü ile birlikte gelir: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` ve `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

Tamsayı ve ondalıklı sayılarıda kesin tip karşılaştırmalar için `===` operatörü kullanılabilir:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

Elixir'in önemli bir özelliği de, iki değişken tipini karşılaştırabiliyor olmasıdır. Sıralama işlemleri için kolaylık sağlar. Aşağıdaki sıralamayı ezberlemek gerekmez ama bunun farkında olmakta yarar vardır:


```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

Tüm bunlar başka dillerde bulamayacağınız, ilginç fakat tamamen geçerli bir sonuca yol açar:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### Stringlere Şablonları (Interpolation)

Eğer siz Ruby kullandıysanız, string şablonları (interpolation) Elixirin yöntemi tanıdık gelecektir:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### Stringleri Birbirine Ekleme (Concatenation)

Stringler birbirine `<>` operatoru kullanılarak bağlanabilir:


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```
