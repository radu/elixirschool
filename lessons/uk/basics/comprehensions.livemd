# Вирази

## Основи

Часто спискові вирази використовуються для створення стисліших визначень для ітерації `Enum` і `Stream`.
Давайте поглянемо на простий вираз і розберемо його детальніше:


```elixir
 list = [1, 2, 3, 4, 5]
```

```elixir
 for x <- list, do: x*x
```

Перше, що ми помічаємо - це використання `for` і генератора.
Що таке генератор?
Генератори - це вирази подібні до `x <- [1, 2, 3, 4]`, які можна знайти в спискових виразах.
Вони відповідальні за генерування наступного значення.

На щастя, використання виразів не обмежується списками; вони можуть працювати з будь-якими перечисленнями:


```elixir
 for {_key, val} <- [one: 1, two: 2, three: 3], do: val
```

```elixir
 for {k, v} <- %{"a" => "A", "b" => "B"}, do: {k, v}
```

```elixir
 for <<c <- "hello">>, do: <<c>>
```

Як і багато інших речей в Elixir, генератори покладаються на зіставлення зі зразком для того, щоб порівнювати вхідний набір зі змінною зліва.
У випадку, якщо співпадіння не знайдено, значення ігнорується:


```elixir
 for {:ok, val} <- [ok: "Hello", error: "Unknown", ok: "World"], do: val
```

Також можна використовувати кілька генераторів, подібно до вкладених циклів:


```elixir
 list = [1, 2, 3, 4]
```

```elixir
 for n <- list, times <- 1..n do
```

Щоб краще проілюструвати зациклення, що стається, давайте використаємо `IO.puts` і відобразимо два згенерованих значення:


```elixir
 for n <- list, times <- 1..n, do: IO.puts "#{n} - #{times}"
```

Спискові вирази - це синтаксичний цукор і повинні використовуватися лише там, де це доречно.

## Фільтри

Фільтри можна сприймати як певну варту для виразів.
Коли відфільтроване значення повертає `false` або `nil` - воно виключається з фінального списку.
Давайте проітеруємо по ряду і припустимо, що нам потрібні лише парні числа.
Ми використаємо функцію `is_even/1` з модулю `Integer`, щоб визначити, яким є значення: парним чи непарним.


```elixir
 for x <- 1..10, is_even(x), do: x
```

Подібно до генераторів, ми можемо використовувати декілька фільтрів одночасно.
Давайте розширимо наш ряд і потім відфільтруємо, щоб залишити значення, що одночасно є парними і націло діляться на 3.


```elixir
 for x <- 1..100,
```

## Використання :into

А що якби ми хотіли створити щось окрім списку?
З опцією `:into` ми це можемо зробити!
Загалом, `:into` приймає будь-яку структуру, що імплементує протокол `Collectable`.

Давайте створимо асоціативний масив з ключового списку використовуючи `:into`:


```elixir
 for {k, v} <- [one: 1, two: 2, three: 3], into: %{}, do: {k, v}
```

Оскільки бінарні значення належать до `Collectable`, ми можемо використати спискові вирази і `:into` щоб створити стрічки:


```elixir
 for c <- [72, 101, 108, 108, 111], into: "", do: <<c>>
```

Ось і все!
Спискові вирази - це простий і стислий спосіб ітерувати колекції.
