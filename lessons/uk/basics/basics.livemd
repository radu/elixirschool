# Основи

## Початок роботи з Elixir

### Встановлення

Інструкції для встановлення для кожної ОС знаходяться на офіційному сайті elixir-lang.org в розділі [Installing Elixir](http://elixir-lang.org/install.html).

Після того як Elixir встановлено, ви можете легко перевірити, яку саме версію було встановлено:

    % elixir -v
    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Elixir {{ site.elixir.version }}

### Інтерактивний режим роботи

Elixir поставляється з утилітою `iex`, інтерактивною консоллю, яка дозволяє виконувати код Elixir.

Для початку запустимо утиліту `iex`:

    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
    iex>

То ж спробуймо написати декілька простих виразів:


```elixir

```

```elixir
 2+3 == 5
```

```elixir
 String.length("The quick brown fox jumps over the lazy dog")
```

Не біда, якщо ви поки не розумієте деталей кожного виразу. До них ми ще дійдемо.

## Прості типи даних

### Цілі числа


```elixir
 255
```

Також підтримуються числа в двійковій, вісімковій та шістнадцятковій системах числення:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### Числа з рухомою комою

В Elixir числа з рухомою комою потребують наявності цифри на початку.


```elixir
 3.41
```

```elixir
 .41
```

```elixir
 1.0e-10
```

### Булевий тип

Elixir підтримує `true` та `false` як логічний тип. Крім `false` та `nil` все є істиною:


```elixir
 true
```

```elixir
 false
```

### Атоми

Атом - це константа, значенням якої є її ім'я. 
Якщо ви знайомі з мовою програмування Ruby, то це схоже на символи:


```elixir
 :foo
```

```elixir
 :foo == :bar
```

Логічні значення `true` та `false` також є відповідними атомами:


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

Назви модулів в Elixir також є атомами. `MyApp.MyModule` це валідний атом, навіть якщо такий модуль ще не був заявлений:


```elixir
 is_atom(MyApp.MyModule)
```

Атоми також використовуються для доступу до Erlang бібліотек та модулів:


```elixir
 :crypto.strong_rand_bytes 3
```

### Рядки

Рядки в Elixir кодуються в UTF-8 та об’являються за допомогою подвійних лапок:


```elixir
 "Hello"
```

```elixir
 "dziękuję"
```

Вони підтримують спецсимволи, такі як початок нового рядка:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

Elixir також включає складніші типи даних. 
Ми розберемо їх в подальших частинах, коли розглядатимемо [колекції](/uk/lessons/basics/collections) and [функції](/uk/lessons/basics/functions).

## Базові операції

### Арифметика

Elixir підтримує базові оператори `+`, `-`, `*` та `/` очевидним чином.
Важливо запам’ятати, що `/` завжди повертає число з рухомою комою:


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

Якщо потрібне цілочисельне ділення або залишок, для цього є спеціальні функції:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### Логічні операції

Elixir має оператори `||`, `&&`, `!`. 
Вони підтримують будь-який тип аргументів:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

Також є три додаткових оператори, в яких першим аргументом _повинен_ бути логічний тип (`true` and `false`):


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

Примітка: `and` і `or` в Elixir насправді відповідають `andalso` і `orelse` в Erlang.

### Порівняння

Elixir має всі стандартні оператори порівняння, до яких ми звикли: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` та `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

Для строгих порівнянь цілих чисел з числами з рухомою комою можна використовувати `===`:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

Важливою особливістю Elixir є той факт, що будь-які два типи можуть бути порівняні.
Це дуже корисно при сортуванні. Не має сенсу запам'ятовувати порядок сортування, але варто знати що він є:


```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

Це веде до не очевидних порівнянь, яких немає в інших мовах програмування:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### Інтерполяція рядків

Якщо ви програмували на Ruby, то інтерполяція в Elixir може здатися знайомою:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### Об’єднання рядків

Операція об’єднання двох рядків (конкатенація) виконується за допомогою оператора `<>`:


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```
