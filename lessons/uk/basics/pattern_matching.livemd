# Зіставлення зі зразком

## Оператор зіставлення

В мові Elixir оператор `=` насправді є оператором зіставлення по аналогії зі знаком рівності в алгебрі. Його використання перетворює вираз на рівняння, і Elixir зіставляє ліву частину виразу з правою. У випадку успішного зіставлення буде повернуто розв'язане рівняння, інакше - виникне помилка:


```elixir
 x = 1
```

Найпростіше зіставлення:


```elixir
 1 = x
```

```elixir
 2 = x
```

Зіставлення з колекціями:


```elixir
 list = [1, 2, 3]
```

```elixir
 [1, 2, 3] = list
```

```elixir
 [] = list
```

```elixir
 [1 | tail] = list
```

```elixir
 tail
```

```elixir
 [2|_] = list
```

```elixir
 {:ok, value} = {:ok, "Successful!"}
```

```elixir
 value
```

```elixir
 {:ok, value} = {:error}
```

## Фіксуючий оператор

Ми вже розібрались, що оператор зіставлення робить присвоєння у тих випадках, коли ліва сторона зіставлення включає змінну. В деяких випадках переприсвоєння змінної є небажаним. У таких випадках використовується "фіксуючий оператор" `^`.

Коли ми закріпляємо змінну з його допомогою - зіставлення відбувається з наявним значенням змінної, замість присвоювання нового значення:


```elixir
 x = 1
```

```elixir
 ^x = 2
```

```elixir
 {x, ^x} = {2, 1}
```

```elixir
 x
```

Версія Elixir 1.2 додала підтримку цього оператору в ключі асоціативних масивів і функціональні розгалуження:


```elixir
 key = "hello"
```

```elixir
 %{^key => value} = %{"hello" => "world"}
```

```elixir
 value
```

```elixir
 %{^key => value} = %{:hello => "world"}
```

Приклад використання в функціональному розгалуженні:


```elixir
 greeting = "Hello"
```

```elixir
 greet = fn
```

```elixir
 greet.("Hello", "Sean")
```

```elixir
 greet.("Mornin'", "Sean")
```

```elixir
 greeting
```

Варто зазначити, що в прикладі з `"Mornin'"` переназначення `greeting` в `"Mornin'"` відбувається тільки в рамках виконання функції. Поза функцією `greeting` все ще означає `"Hello"`.
