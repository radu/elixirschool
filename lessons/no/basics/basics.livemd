# Grunnleggende Elixir

## Installering

### Installere Elixir

Se guiden hos Elixir-lang.org - [Installere Elixir](http://elixir-lang.org/install.html) på hvordan du installerer Elixir på en rekke forskjellige operativsystemer.

### Interaktiv Modus

Elixir leveres med `iex`, et interaktivt skall som lar oss evaluere Elixirkoder fortløpende.

For å starte IEx skriver vi `iex` i terminalvinduet:

	Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

	Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
	iex>

## Grunnleggende Typer

### Heltall (integers)


```elixir
 255
```

Elixir støtter binære, oktale og heksdesimale heltall:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### Flyttall (floats)

flyttall krever et desimal med minimum et siffer. De har 64 bit dobbel nøyaktighet, og støtter `e` for å lage eksponenter:


```elixir
 3.14 
```

```elixir
 .14
```

```elixir
 1.0e-10
```


### Boolske Verdier (booleans)

Elixir støtter `true` og `false` som boolske verdier. Alt er 'sant', bortsett fra `false` (usant) og `nil` (null):


```elixir
 true
```

```elixir
 false
```

### Atomer (Atoms)

Et atom er en konstant, hvor navnet er dens verdi. Om du er kjent med Ruby, kjenner du disse igjen som Symboler:


```elixir
 :foo
```

```elixir
 :foo == :bar
```

MERK: De boolske verdiene `true` og `false` er også atomer: `:true` og `:false`.


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

Navnet på moduler i Elixir er også atomer. `MinApp.MinModule` er en gyldig atom,
selv om ingen slik module har blitt lagd.


```elixir
 is_atom(MinApp.MinModule)
```

Atomer er også brukt for å referere til moduler fra Erlang biblioteket, men også til de innebygde modulene.


```elixir
 :crypto.strong_rand_bytes 3
```

### Strenger (strings)

Strenger i Elixir er UTF-8 innkodet, og skrives mellom doble anførselstegn:


```elixir
 "Hello"
```

```elixir
 "dziękuję"
```

Strenger støtter linjeskift og avbruddssekvenser:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

## Grunnleggende Operatorer

### Aritmetikk

Elixir støtter de grunnleggende matematiske operatorene `+`, `-`, `*` og `/`. Det er verdt å merke seg at `/` alltid vil returnere et flyttall (float):


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

Elixir har to innebygde funksjoner for å returnere et heltall(integer), eller finne rest i en divisjon:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### Boolske Operatorer (boolean)

Elixir lar deg bruke de boolske operatorene `||`, `&&` og `!`.
Disse operatorene støtter alle typer:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

Det er i tillegg tre andre operatorer, hvor første argumentet _må_ være en boolsk verdi (`true` eller `false`):


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

### Sammenligningoperatorer

Elixir lar deg bruke en rekke forskjellige operatorer for sammenligning av verdier: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` og `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

For en nøyaktig (strict) sammenligning av heltall og flyttall benytter vi oss av `===`:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

En viktig egenskap i Elixir, er at alle typer kan bli sammenlignet med hverandre.
Dette er spesielt nyttig ved sortering. Vi trenger ikke memorisere sorteringsrekkefølgen, men det er greit å være kjent med den:


```elixir
number < atom < reference < function < port < pid < tuple < map < list < bitstring
```

Dette kan føre til noen interessante, men gyldige sammenligninger du kanskje ikke finner i andre programmeringsspråk:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### Strenginterpolering (String interpolation)

Hvis du noen gang har programmert i Ruby, vil strenginterpolering i Elixir
se kjent ut:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### Strengsammensetning (String concatenation)

Strengsammensetning benytter `<>` operatoren:


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```

iex> "Hello " <> name
"Hello Sean"
```


Dette kan føre til noen interessante, men gyldige sammenligninger du kanskje ikke finner i andre programmeringsspråk:

```elixir
iex> :hello > 999
true
iex> {:hello, :world} > [1, 2, 3]
false
```

### Strenginterpolering (String interpolation)

Hvis du noen gang har programmert i Ruby, vil strenginterpolering i Elixir
se kjent ut:

```elixir
iex> name = "Sean"
iex> "Hello #{name}"
"Hello Sean"
```

### Strengsammensetning (String concatenation)

Strengsammensetning benytter `<>` operatoren:

```elixir
iex> name = "Sean"
iex> "Hello " <> name
"Hello Sean"
```
