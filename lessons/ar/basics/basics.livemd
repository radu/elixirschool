# الأساسيات

## البدء

### تثبيت إليكسير

يمكن إيجاد تعليمات التثبيت لكل نظم التشغيل على موقع elixir-lang.org في دليل [تثبيت إليكسير](http://elixir-lang.org/install.html).

بعد تثبيت إليكسير تستطيع أن تتأكد من النسخة المثبتة.

    % elixir -v
    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Elixir {{ site.elixir.version }}

### تشغيل نمط موجة الأوامر التفاعلي

تضم إليكسير الأمر `iex` والذي يمكنك من تشغيل اللغة في الوضع التفاعلي وتنفيذ بعض جُمَل الأوامر

دعنا نبدأ بتنفيذ الأمر `iex`:

    Erlang/OTP {{ site.erlang.OTP }} [erts-{{ site.erlang.erts }}] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

    Interactive Elixir ({{ site.elixir.version }}) - press Ctrl+C to exit (type h() ENTER for help)
    iex>

دعنا نحاول كتابة بعض الجُمَل (التعبيرات) البسيطة:

```elixir
 2+3
```

```elixir
 2+3 == 5
```

```elixir
 String.length("The quick brown fox jumps over the lazy dog")
```

لا تقلق إذا لم تفهم كل التعبيرات حتى الآن، نأمل أن تصلك فكرة عامة عن اللغة وتعبيراتها.


## أنواع البيانات الأساسية

### الأعداد الصحيحة


```elixir
 255
```

هناك دعم مدمج لنظام العد الثنائي والثماني والست عشري:


```elixir
 0b0110
```

```elixir
 0o644
```

```elixir
 0x1F
```

### الأعداد العشرية

في إليكسير، يجب كتابة خانة واحدة على الأقل قبل الفاصلة لتمثيل عدد عشري كما يوجد دعم للأس بستخدام `e`.


```elixir
 3.41
```

```elixir
 .41
```

```elixir
 1.0e-10
```


### القيم المنطقية

تدعم إليكسير القِيَم المنطقية `true` و `false` وجميع القيم تعبّر عن الصحة ما عدا `false` و `nil`.


```elixir
 true
```

```elixir
 false
```

### الذرات

الذرة تعتبر ثابتاً اسمه يساوى قيمته. إذا كنت على معرفة بلغة برمجة روبي، الذرة هي مرادفة الرموز (Symbols):


```elixir
 :foo
```

```elixir
 :foo == :bar
```

ملاحظة: القيم المنطقية `true` و `false` تعتبر ذرات `:true` و `:false`.


```elixir
 is_atom(true)
```

```elixir
 is_boolean(:true)
```

```elixir
 :true === true
```

اسماء الوحدات في إليكسير هي عبارة عن ذرات. `MyApp.MyModule` هو ذرة, حتى ولو لم يتم تعريف هذه الوحدة.


```elixir
 is_atom(MyApp.MyModule)
```

الذرات ايضاً مستخدمة لتكون مرجع وحدات من مكتبات لغة البرمجة إرلانج.


```elixir
 :crypto.strong_rand_bytes 3
```

### السلاسل النصية

القيم النصية في إليكسير هي أحرف بترميز UTF-8 محاطة بعلامتي تنصيص مزدوجة.


```elixir
 "Hello"
```

```elixir
 "dziękuję"
```

يمكن للقيم النصية أن تُكْتَب مقسمة على أكثر من سطر:


```elixir
 "foo
```

```elixir
 "foo\nbar"
```

تضم أليكسير أيضا أنواع بيانات معقدة أكثر. سوف نتعلّم أكثر عنها أثناء الدرس عن المجموعات والدوالّ.

## العمليات الأساسية

### الحساب

تدعم أليكسير العمليات الحسابية الأساسية  `+`, `-`, `*`, و `/` كما تتوقع. من المهم أن تلاحظ أن `/` دائما سيعيد عدد عشري:


```elixir
 2 + 2
```

```elixir
 2 - 1
```

```elixir
 2 * 5
```

```elixir
 10 / 5
```

في إليكسير، يمكنك الحصول على ناتج القسمة بدون باقٍ أو الحصول على باقي القسمة فقط عن طريق الدوالّ التالية:


```elixir
 div(10, 5)
```

```elixir
 rem(10, 3)
```

### المنطق

توفّر إليكسير رموز `||`, `&&`, و `!` لعمليات حسابية، وهي تدعم أي نوع:


```elixir
 -20 || true
```

```elixir
 false || 42
```

```elixir
 42 && true
```

```elixir
 42 && nil
```

```elixir
 !42
```

```elixir
 !false
```

هناك ثلاث أوامر أخرى أيضا للتعامل مع القيم المنطقية مع العلم انه يجب ان يكون المعامل الاول قيمة منطقية (`true` or `false`):


```elixir
 true and 42
```

```elixir
 false or true
```

```elixir
 not false
```

```elixir
 42 and true
```

```elixir
 not 42
```

### المقارنة

عند إليكسير كل عمليات المقارنة المعتادة: `==`, `!=`, `===`, `!==`, `<=`, `>=`, `<` و `>`.


```elixir
 1 > 2
```

```elixir
 1 != 2
```

```elixir
 2 == 2
```

```elixir
 2 <= 3
```

لمقارنة صارمة بين أعداد صحيحة وأعداد عشرية، استخدم `===`:


```elixir
 2 == 2.0
```

```elixir
 2 === 2.0
```

من الخصائص المهمة في إليكسير إمكانية المقارنة بين قيمتين من نفس النوع، تأتي أهمية ذلك عند ترتيب القِيَم. ليس من الضروري أن تحفظ هذا الترتيب ولكن من باب العلم بالشيء.


```elixir
number < atom < reference < functions < port < pid < tuple < maps < list < bitstring
```

يمكن أن يؤدي هذا لمقارنات مثيرة للاهتمام، ولكنها صحيحة تماماً، ولا تستطيع أن تجدها في لغات برمجة أخرى:


```elixir
 :hello > 999
```

```elixir
 {:hello, :world} > [1, 2, 3]
```

### القيم النصية الممزوجة

إذا كنت من مستخدمي روبي، مزج القيم النصية في إليكسير سيبدو مألوفاً:


```elixir
 name = "Sean"
```

```elixir
 "Hello #{name}"
```

### الدمج بين القِيَم النصية

استخدم `<>` لعملية المزج بين القيم النصية:


```elixir
 name = "Sean"
```

```elixir
 "Hello " <> name
```
