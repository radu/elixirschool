# কালেকশন

## Lists

লিস্ট হচ্ছে এমন একটি কালেকশন যা যে কোন মান কে সংগ্রহে রাখে। লিস্টে একই রকম একাধিক ভ্যালু (মান) থাকতে পারে:


```elixir
 [3.14, :pie, "Apple"]
```

এলিক্সির লিস্ট সমূহ "লিঙ্কড লিস্ট" আকারে সংরক্ষিত। তার মানে হল, লিস্টের দৈর্ঘ্য জানতে `O(n)` সময় লাগবে। এ কারণে লিস্টের বাম থেকে (সম্মুখে) ডাটা এন্ট্রি দেওয়া দ্রুততর, ডান থেকে (শেষপ্রান্তে) নয়।


```elixir
 list = [3.14, :pie, "Apple"]
```

```elixir
 ["π" | list]
```

```elixir
 list ++ ["Cherry"]
```

### লিস্ট কনক্যাটিনেশন (একত্রকরণ)

লিস্ট কনক্যাটিনেট (একত্র) করতে `++/2` ব্যবহৃত হয়:


```elixir
 [1, 2] ++ [3, 4, 1]
```

`++/2` ফরম্যাট নিয়ে কিছু কথা, এলিক্সির (এবং এরল্যাং, যার উপর এলিক্সির বানানো) প্রোগ্রামিং ল্যাঙ্গুয়েজে কোন ফাংশন অথবা অপারেটরের নাম দুই ভাগে বিভক্ত- ১) নাম যা সেই ফাংশনের অথার দিয়ে থাকেন (এই ক্ষেত্রে- `++`) এবং ২) তার আরিটি, অর্থাৎ, ফাংশন অথবা অপারেটরটি কয়টি আর্গুমেন্ট নিতে পারে। ১) ও ২) একটি "ফরওয়ার্ড স্ল্যাশের" মাধ্যমে যুক্ত থাকে। আপাতত আমাদের এতটুকু জানলেই চলবে, এ বিষয়ে পরে আরও আলোচনা করা হবে।

### লিস্ট সাবট্র্যাকশন (কোন মান বাদ দেওয়া)

লিস্ট থেকে কোন মান বাদ দিতে `--/2` অপারেটর ব্যবহার করা হয়ে থাকে; যা বিয়োগ করছেন তা যদি লিস্টে অনুপস্থিত থাকে তাহলেও কোন সমস্যা নেই:


```elixir
 ["foo", :bar, 42] -- [42, "bar"]
```

একই ভ্যালু লিস্টে একাধিক বার থাকলে একটু সচেতন থাকতে হবে।
তবে আপনি যে ভ্যালু বাদ দিতে চাচ্ছেন তা যদি লিস্টে একাধিকবার থাকে তাহলে বামদিক থেকে বাদ দেওয়া শুরু হবে-


```elixir
 [1,2,2,3,2,3] -- [1,2,3,2]
```

**দ্রষ্টব্য:** এটি [স্ট্রিক্ট কম্প্যারিশন](/bn/lessons/basics/basics#comparison) ব্যবহার করে ভ্যালু ম্যাচ করার জন্য।

### হেড/টেইল

লিস্ট ব্যবহার করার সময়ে প্রায়েই হেড (লিস্টের প্রথম ভ্যালু) এবং টেইল (লিস্টের বাকি ভ্যালু) জানার দরকার পরে। এলিক্সির দুইটি ফাংশন দিয়েছে এর জন্যে, যা হল- `hd` ও `tl`। উদাহরণ-


```elixir
 hd [3.14, :pie, "Apple"]
```

```elixir
 tl [3.14, :pie, "Apple"]
```

এছাড়াও আমরা [প্যাটার্ন ম্যাচিং](/bn/lessons/basics/pattern_matching) এবং কন্স অপারেটর `|` দিয়েও একটি লিস্টকে দুই ভাগে ভাগ করতে পারি যা সম্পর্কে পরে আলোচনা করা হবে।


```elixir
 [head | tail] = [3.14, :pie, "Apple"]
```

```elixir
 head
```

```elixir
 tail
```

## টাপল

টাপল লিস্টের মতই একটি কালেকশন কিন্তু টাপলে ডাটা একাধারে সংরক্ষিত থাকে। এর মানে হল, টাপলের দৈর্ঘ্য জানা যায় অনেক দ্রুত কিন্তু টাপলের মান চেঞ্জ করা একটু মুসকিল হয়ে পড়ে। টাপ্লকে মডিফাই করতে হলে পুরা ডাটাকে মেমরিতে রাখা লাগে তাই টাপল মডিফিকেশন না করাই ভাল।


```elixir
 {3.14, :pie, "Apple"}
```

টাপল প্রায়েই ব্যবহৃত হয় ফাংশনের রীটার্ন ভ্যালু হিসেবে যখন অতিরিক্ত ডাটা প্রয়োজন, এ সম্পর্কে আরও জানা যাবে যখন আমরা [প্যাটার্ন ম্যাচিং](/bn/lessons/basics/pattern_matching) করব:


```elixir
 File.read("path/to/existing/file")
```

```elixir
 File.read("path/to/unknown/file")
```

## কী-ওয়ার্ড লিস্ট

কী-ওয়ার্ড ও ম্যাপ হল এলিক্সিরের অ্যাসোসিয়েটিভ কালেকশন।

এলিক্সিরে কী-ওয়ার্ড হল বিশেষ লিস্ট যার প্রতিটি মান হচ্ছে ২ সদস্য বিশিষ্ট টাপ্ল যার প্রথম ডাটা হল অ্যাটম। এদের পারফর্মেন্স লিস্টের সমকক্ষ।


```elixir
 [foo: "bar", hello: "world"]
```

```elixir
 [{:foo, "bar"}, {:hello, "world"}]
```

কী-ওয়ার্ড লিস্টের তিনটি বিশেষ গুণাবলী:

+ কী গুলি অ্যাটম
+ কী গুলি অর্ডারড
+ কী গুলি অনন্য (ইউনিক) না হলেও চলবে

এই কারন গুলির কারনে কী-ওয়ার্ড লিস্ট সাধারণত ফাংশনের অতিরিক্ত প্যারামিটার (অপ্সনাল) হিসেবে ব্যবহৃত হয়ে থাকে।

## ম্যাপ

এলিক্সিরে ম্যাপ হল আন-ওর্ডারড কী/ভ্যালু স্টোর। কি ওয়ার্ড লিস্টের মত দেখতে মনে হলেও, কি ওয়ার্ড লিস্টের সাথে ম্যাপের মূল পার্থক্য হচ্ছে এখানে কি হিসাবে যেকোন টাইপ ব্যবহার করা যায় এবং ম্যাপ আনঅর্ডারড। খালি ম্যাপকে `%{}` সিনট্যাক্স দিয়ে বানানো হয়:


```elixir
 map = %{:foo => "bar", "hello" => :world}
```

```elixir
 map[:foo]
```

```elixir
 map["hello"]
```

ভার্সন  ১.২ থেকে  আপনি ভেরিয়েব্লকে কী হিসেবে ব্যবহার করতে পারবেন:


```elixir
 key = "hello"
```

```elixir
 %{key => "world"}
```

একই কী কে একাধিকবার ব্যবহার করলে, সর্বশেষ মানটি ব্যবহৃত হবে।


```elixir
 %{:foo => "bar", :foo => "hello world"}
```

যদি শুধু অ্যাটম থাকে ম্যাপটির কী, তাহলে নীচের সিনট্যাক্সটি ব্যবহার করতে পারবেন:


```elixir
 %{foo: "bar", hello: "world"}
```

```elixir
 %{foo: "bar", hello: "world"} == %{:foo => "bar", :hello => "world"}
```

ম্যাপের নিজস্ব সিনট্যাক্স রয়েছে আপডেট ও অ্যাক্সেসের জন্য যদি কী হয় অ্যাটম:


```elixir
 map = %{foo: "bar", hello: "world"}
```

```elixir
 %{map | foo: "baz"}
```

```elixir
 map.hello
```

ম্যাপের আরেকটা মজার গুণ হচ্ছে, একটি ম্যাপের ভ্যালু পরিবর্তন করার জন্য নিজস্ব সিনট্যাক্স আছে (দ্রষ্টব্য: এটি মূলত একটি নতুন ম্য়াপ তৈরী করে):


```elixir
 map = %{foo: "bar", hello: "world"}
```

```elixir
 %{map | foo: "baz"}
```

**বিঃদ্রঃ** এই সিনট্যাক্স শুধুমাত্র তখনই কাজ করবে যখন কি টি ম্যাপে ইতমধ্যেই উপস্থিত আছে। যদি কি টি না থাকে, তাহলে `KeyError` রেইজ হবে।

নতুন কি তৈরী করতে হলে, [`Map.put/3`](https://hexdocs.pm/elixir/Map.html#put/3) ব্যবহার করতে হবে।


```elixir
 map = %{hello: "world"}
```

```elixir
 %{map | foo: "baz"}
```

```elixir
 Map.put(map, :foo, "baz")
```
