# কম্প্রিহেনশান

## বেসিক

`Enum` এবং `Stream` এর মধ্যে লুপিং করতে প্রায়েই কম্প্রিহেনশান ব্যবহৃত হয় কারণ এটি লিখিত কোডকে সংক্ষিপ্ত করে। একটি সহজ কম্প্রিহেনশান দেখা যাক:


```elixir
 list = [1, 2, 3, 4, 5]
```

```elixir
 for x <- list, do: x*x
```

প্রথমেই যা আমাদের চোখে পরে তা হল `for` এবং তারপর জেনারেটর। 
জেনারেটর কি জিনিস?
জেনারেটর হল `x <- [1, 2, 3, 4]` এক্সপ্রেশানগুলি যা লিস্ট কম্প্রিহেনশানের সময় দেখা যায়। এদের কাজ হল পরের ভ্যালু প্রদান করা।

লিস্ট কম্প্রিহেনশান শুধুমাত্র লিস্টের মধ্যে সীমাবদ্ধ নয়। এরা যে কোন এনুমেরেবলের সাথেই কাজ করতে পারে।


```elixir
 for {_key, val} <- [one: 1, two: 2, three: 3], do: val
```

```elixir
 for {k, v} <- %{"a" => "A", "b" => "B"}, do: {k, v}
```

```elixir
 for <<c <- "hello">>, do: <<c>>
```

প্যাটার্ন ম্যাচিং এলিক্সিরের একটি বিশেষত্ব যার উপর এর বহু সিনট্যাক্সিয় ফিচার নির্ভরশীল। জেনারেটর এর ব্যতিক্রম নয়। জেনারেটররা তাদের ইনপুট সেটকে বাম পার্শ্বীয় ভেরিয়েবলের সাথে ম্যাচ করে, ম্যাচ পাওয়া না গেলে তা ইগনর করা হয়।


```elixir
 for {:ok, val} <- [ok: "Hello", error: "Unknown", ok: "World"], do: val
```

একাধিক জেনারেটর ব্যবহার করা সম্ভব, ঠিক নেস্টেড লুপের মত।


```elixir
 list = [1, 2, 3, 4]
```

```elixir
 for n <- list, times <- 1..n do
```

আভ্যন্তরীণ লুপিংকে আরও ভালভাবে বুঝানোর জন্য আমরা `IO.puts` দিয়ে জেনারেটেড ভ্যালু দেখাতে পারি। 


```elixir
 for n <- list, times <- 1..n, do: IO.puts "#{n} - #{times}"
```

লিস্ট কম্প্রিহেনশান হল সিন্ট্যাক্টিক সুগার যা শুধুমাত্র প্রয়োজনভেদে ও যথাস্থানে ব্যবহার করা উচিৎ।

## ফিল্টার

ফিল্টারকে আপনি মনে করতে পারেন লিস্ট কম্প্রিহেনশানের গার্ডস্বরপ। ফিল্টারকৃৎ ভ্যালু যদি `false` অথবা `nil` হয় তবে তা রেজাল্ট লিস্ট থেকে বাদ পড়ে যায়। আমরা এখন একটি রেঞ্জের উপর লুপ করে শুধুমাত্র জোড় সংখ্যা বের করব লিস্ট কম্প্রিহেনশান ও ফিল্টার দিয়ে। এর জন্য আমরা `is_even/1` ফাংশন ব্যবহার করব।


```elixir
 for x <- 1..10, is_even(x), do: x
```

জেনারেটরের মত ফিল্টারও একাধিক ব্যবহার করা যায়। যদি আমরা আমাদের রেঞ্জকে বর্ধিত করি এবং শুধুমাত্র সেগুলিকে দেখতে চাই যারা জোড় এবং ৩ দ্বারা বিভাজ্য দুটোই তাহলে নিচের মত করে কোড সাজাব:


```elixir
 for x <- 1..100,
```

## :into এর ব্যবহার

আমরা যদি লিস্ট ব্যতীত অন্য কিছু রিটার্ন করতে চাই তাহলে তা কিভাবে করব? উত্তর হল `:into`। `:into` এর মাধ্যমে আমরা যে কোন `Collectable` প্রোটোকল মেনে চলা স্ট্রাকচারে আমাদের জেনারেটর প্রদত্ত রেজাল্ট ধারণ করতে পারি।

`:into` দিয়ে ম্যাপ থেকে কীওয়ার্ড লিস্টে পরিণত করা যাক কিছু ডেটা:


```elixir
 for {k, v} <- [one: 1, two: 2, three: 3], into: %{}, do: {k, v}
```

যেহেতু বিটস্ট্রিংরাও এনুমেরেবল সেহেতু আমরা লিস্ট কম্প্রিহেনশান ও `:into` দিয়ে স্ট্রিং প্রস্তুত করতে পারি।


```elixir
 for c <- [72, 101, 108, 108, 111], into: "", do: <<c>>
```

শেষ! লিস্ট কম্প্রিহেনশান ব্যবহার করে বোধগম্য ও সংক্ষিপ্ত সিনট্যাক্স দিয়ে আমরা লুপিং ও ইটারেশান করতে পারি।
