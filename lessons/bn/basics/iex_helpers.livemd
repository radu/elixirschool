# IEx হেল্পার

## সূচনা 

এলিক্সিরে কাজ করার সময়ে `IEx` আপনার সবচেয়ে গুরুত্বপূর্ণ সঙ্গী। এটি একটি `REPL (Read Evaluate Print Loop)` তবে এর অনেক বীল্ট-ইন সুবিধা রয়েছে যা আপনার এলিক্সির একপেরিয়েন্সকে সম্রিদ্ধ করবে। IEx এর  কিছু প্রয়োজনীয় বীল্ট-ইন হেল্পারের বর্ণনা এই অধ্যায়ে আমরা দিব। 

### অটোকমপ্লিট 

শেলে কাজ করার সময়ে আমরা প্রায়েই নতুন একটি মডিউলের সম্মুখীন হতে পারি যার সম্পর্কে আমাদের ধারণা নেই অথবা কম। আমরা একটি মডিউলের নামের শেষে একটি ডট (`.`) এবং তারপর ট্যাব প্রেস করে লিস্ট পেতে পারি সেই মডিউলের সদস্যের (ফাংশন, ম্যাক্রো ইত্যাদি)। 


```elixir
 Map. # press Tab
```

### .iex.exs

প্রতিবার IEx শুরু হওয়ার সময়ে `.iex.exs` কনফিগারেশান ফাইলটি খুঁজে নেয় কি কি লোড করতে হবে তার জন্য। যদি কারেন্ট ডিরেক্টরিতে তা না থাকে, তাহলে তা খুঁজবে ইউজারের হোম ডিরেক্টরিতে (`~/.iex.exs`) 

কনফিগারেশান অপশন ও কোড যা এই ফাইলে ডিফাইন করা হবে তা আমাদের `IEx` সেশানে পাওয়া যাবে সেশান শুরু করা মাত্রই। যেমন আমরা যদি নীচের মত করে কিছু ফাংশন বর্ণনা করি `.iex.exs` ফাইলে, তাহলে আমরা যতবার `IEx` খুলব, ততবার এই ফাংশনগুলিকে সরাসরি পাব। 


```elixir
defmodule IExHelpers do
  def whats_this?(term) when is_nil(term), do: "Type: Nil"
  def whats_this?(term) when is_binary(term), do: "Type: Binary"
  def whats_this?(term) when is_boolean(term), do: "Type: Boolean"
  def whats_this?(term) when is_atom(term), do: "Type: Atom"
  def whats_this?(_term), do: "Type: Unknown"
end
```

এখন থেকে `IEx` সেশানে `IExHelpers` মডিউল আমাদের কাছে থাকবে ব্যবহারের জন্য। তাহলে `IEx` এর একটি সেশান খুলে দেখা যাক- 


```elixir
 IExHelpers.whats_this?("a string")
```

```elixir
 IExHelpers.whats_this?(%{})
```

```elixir
 IExHelpers.whats_this?(:test)
```

দেখতেই পাচ্ছি যে আমাদের আলাদাভাবে `IExHelpers` কে `require` অথবা `import` করা লাগেনি। সরাসরিই পেয়ে গিয়েছি। 

### h

`h` সম্ভবত সবচেয়ে গুরুতপূর্ন হেল্পারগুলোর মধ্যে একটি। এলিক্সির ডকুমেন্টেশানের জন্য ল্যাঙ্গুয়েজ প্রদত্ত সুবিধা দিয়ে থাকে যার ফলে যে কোন কোডের ডকুমেন্টেশান আমরা এই কমান্ড দিয়ে পেতে পারি। 


```elixir
 h Enum
```

এখন এই কমান্ড ও পূর্ববর্ণীত অটোকমপ্লিট কমান্ড একত্রিত করে আমরা যে কোন মডিউলের সাথে সহজেই পরিচিত হতে পারি। 

মনে করুন আমরা জীবনে প্রথমবারের মত ম্যাপ `Map` দেখেছি। একটু এক্সপ্লোর করা যাক একে- 


```elixir
 h Map
```

```elixir
 Map.
```

```elixir
 h Map.merge/2
```

দেখাই যাচ্ছে যে আমরা শুধুমাত্র মডিউলের ফাংশন না, বরং প্রতিটি ফাংশনের ডকুমেন্টেশান (উদাহরণসহ) দেখতে পাচ্ছি `h` এর মাধ্যমে। 

### i

আমাদের সদ্য পরিচিত হওয়া `h` এর ব্যবহার করা যাক এবং এর মাধ্যমে  `i` সম্পর্কে পরিচিত হওয়া যাক- 


```elixir
 h i
```

```elixir
 i Map
```

এখন আমাদের হাতে রয়েছে আরও কিছু তথ্য ম্যাপ সম্পর্কে, যেমন এর সোর্স কোডের লোকেশান এবং এর রেফারেন্সকৃত মডিউলসমূহ। এটি অনেক কাজে আসে যখন আমরা কাস্টম অথবা বহিরাগত ডেটা টাইপ অথবা নতুন ফাংশন নিয়ে কাজ করি তখন। 

নীচে কিছু তথ্য দেয়া হল যা আমরা পেতে পারি `i` এর মাধ্যমে- 

- এর অ্যাটম ডেটা টাইপ
- সোর্স কোড এর অবস্থান 
- ভার্সন ও কম্পাইল অপশান 
- সাধারণ বর্ণনা 
- কিভাবে অ্যাক্সেস করা যায় 
- আর কি কি মডিউলকে এটি রেফার করে 

না জেনে কাজ করা থেকে অনেক সুবিধা পাব আমরা যদি আমরা এই হেল্পারটি থেকে আমাদের ফাংশন অথবা মডিউল ঘাটতে পারি। 

### r

`IEx` সেশান খোলা অবস্থায় আমরা যদি কোন মডিউলকে পুনঃকম্পাইল করতে চাই তাহলে এই হেল্পারের আশ্রয় নিব। ধরুন আমরা `IEx` আওতাধীন কোন মডিউলের কিছু কোড চেঞ্জ করেছি (ফাংশন অ্যাড করেছি) এবং এই নতুন ফাংশন রান করতে চাই ওই `IEx` এ। তাহলে আমরা এডিটরে চেঞ্জ ও সেভ করে অতঃপর খোলা `IEx` সেশানে গিয়ে লিখব- 


```elixir
 r MyProject
```

### t

`t` হেল্পারের মাধ্যমে আমরা একটি মডিউলের টাইপ সম্পর্কে জানতে পারি। 


```elixir
 t Map
```

আমরা জানলাম যে ম্যাপ (`Map`) "কী"ও "ভ্যালু" টাইপকে ডিফাইন করে থাকে। 

আর যদি আমরা ম্যাপ এর সোর্স কোড দেখি- 


```elixir
defmodule Map do
# ...
  @type key :: any
  @type value :: any
# ...
```

এটি একটি সহজ উদাহরণ যা দেখায় যে প্রতি ইম্লিমেন্টেশানের কী ও ভ্যালু যে কোন টাইপের হতে পারে।

উপরিউক্ত সকল বীল্ট-ইন ফিচারের মাধ্যমে আমরা সহজেই আমাদের কোড সম্পর্কে জানতে পারব এবং আরও ভালভাবে জানতে পারব যে এলিক্সির কিভাবে কাজ করে। `IEx` অত্যন্ত শক্তিশালী একটি টুল যার দ্বারা প্রোগ্রামাররা সক্ষম হয় অনেক কিছু সরাসরি দেখে নিতে কোন এডিটর না খুলেই। এর মাধ্যমে আমরা এলিক্সির কোডকে আরও সহজে এক্সপ্লোর করতে ও শিখতে পারি। 
