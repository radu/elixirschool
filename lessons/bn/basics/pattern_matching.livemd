# প্যাটার্ন ম্যাচিং

## ম্যাচ অপারেটর 

এলিক্সিরে `=` অপারেটর আসলে ম্যাচিংয়ের জন্য ব্যবহৃত হয়। একে আমরা তুলনা করতে পারি বীজগণিতের সমান চিহ্নের সাথে। এটি সম্পূর্ণ এক্সপ্রেশানকে একটি সমীকরণে পরিণত করে এবং বামপক্ষের সাথে ডানপক্ষ মিলিয়ে থাকে। যদি সমান চিহ্নের দুই পাশ মিলে যায়, তাহলে সেই সমীকরণের মান রিটার্ন করা হয়, অন্যথায় এরর। দেখা যাক- 


```elixir
 x = 1
```

এবার কিছু সাধারণ ম্যাচ দেখা যাক- 


```elixir
 1 = x
```

```elixir
 2 = x
```

আমাদের পরিচিত কিছু কালেকশনের উপর ম্যাচ যেভাবে কাজ করে- 


```elixir
 list = [1, 2, 3]
```

```elixir
 [1, 2, 3] = list
```

```elixir
 [] = list
```

```elixir
 [1 | tail] = list
```

```elixir
 tail
```

```elixir
 [2|_] = list
```

```elixir
 {:ok, value} = {:ok, "Successful!"}
```

```elixir
 value
```

```elixir
 {:ok, value} = {:error}
```

## পিন অপারেটর

আমরা দেখলাম ম্যাচ অপারেটর অ্যাসাইনমেন্টের কাজ কওরে যখন বামপক্ষে কোন ভেরিয়েবল থাকে। তবে কোন কোন ক্ষেত্রে আমরা তা নাও চাইতে পারি, বরং সেই ভেরিয়েবলের মানের সাথে ম্যাচিং করতে চাইতে পারি। এই আচরণের জন্য ব্যবহৃত হয় পিন অপারেটর- `^`

যখন আমরা কোন ভেরিয়েবলকে পিন করি তখন সেই ভেরিয়েবলের তৎকালীন মান ব্যবহৃত হয় ম্যাচের জন্যে, নতুন মান অ্যাসাইন করা হয় না। নীচে এর উদাহরণ দেয়া হয়েছে- 


```elixir
 x = 1
```

```elixir
 ^x = 2
```

```elixir
 {x, ^x} = {2, 1}
```

```elixir
 x
```

এলিক্সির ১.২ থেকে আমরা ম্যাপ কী ও ফাংশন ক্লজের উপরও পিন ব্যবহার করতে পারি-


```elixir
 key = "hello"
```

```elixir
 %{^key => value} = %{"hello" => "world"}
```

```elixir
 value
```

```elixir
 %{^key => value} = %{:hello => "world"}
```

ফাংশন ক্লজের  উপর পিনের অ্যাপ্লিকেশানের উদাহরণ- 


```elixir
 greeting = "Hello"
```

```elixir
 greet = fn
```

```elixir
 greet.("Hello", "Sean")
```

```elixir
 greet.("Mornin'", "Sean")
```
